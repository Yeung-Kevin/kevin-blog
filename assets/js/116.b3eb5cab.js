(window.webpackJsonp=window.webpackJsonp||[]).push([[116],{471:function(t,o,i){"use strict";i.r(o);var e=i(25),r=Object(e.a)({},(function(){var t=this,o=t.$createElement,i=t._self._c||o;return i("ContentSlotsDistributor",{attrs:{"slot-key":t.$parent.slotKey}},[i("div",[i("span",[i("div",[i("div",[i("div",[i("div",[i("div",[i("div",[i("h2",{staticStyle:{margin:"10px 0px 12px",padding:"0px 0px 0px 15px","font-size":"21px","background-color":"#3eaf7c","border-radius":"3px","text-align":"center","text-shadow":"rgb(34, 34, 34) 1px 1px 2px","letter-spacing":"normal",orphans:"2","text-indent":"0px","text-transform":"none","white-space":"normal",widows:"2","word-spacing":"0px","-webkit-text-stroke-width":"0px"}},[i("span",{staticStyle:{"font-size":"21px","background-color":"#3eaf7c","border-radius":"3px","text-shadow":"rgb(34, 34, 34) 1px 1px 2px","letter-spacing":"normal",orphans:"2","text-indent":"0px","text-transform":"none","white-space":"normal",widows:"2","word-spacing":"0px","-webkit-text-stroke-width":"0px",color:"white","font-family":'"Helvetica Neue", Helvetica, Verdana, Arial, sans-serif',"font-variant-caps":"normal","font-variant-ligatures":"normal","font-weight":"bold","line-height":"1.5"}},[t._v("threading.local")])]),i("div",[i("br")]),i("div",[i("span",{staticStyle:{"font-size":"14pt","white-space":"pre-wrap","font-weight":"bold"}},[t._v("1.")]),t._v(" "),i("span",{staticStyle:{"font-size":"14pt","font-weight":"bold"}},[t._v("引子")])]),i("div",[i("br")]),i("ul",[i("li",[i("div",[t._v("假如，开了十个线程并且做同样的一件事，他们需要带着自己的数据进来，完成事情后带着自己的数据出去。如果是并发，同时进来，他们的数据就会混乱")])])]),i("div",[i("br")]),i("ul",[i("li",[i("div",[t._v("一般情况，我们加锁就可以了，一个人先进来，先加锁，另一个人过来看到加锁了，就在外面等，等里面的人出来，自己进去加锁，这样就不会出现数据混乱的问题")])])]),i("div",[i("br")]),i("ul",[i("li",[i("div",[t._v("另一种解决方法就是使用 threading.local() 来解决")])])]),i("div",[i("br")]),i("div",[i("span",{staticStyle:{"font-size":"14pt","white-space":"pre-wrap","font-weight":"bold"}},[t._v("2.")]),t._v(" "),i("span",{staticStyle:{"font-size":"14pt","font-weight":"bold"}},[t._v("介绍")])])]),i("div",[i("span",{staticStyle:{"font-size":"14pt"}},[i("br")])]),i("ul",[i("li",[i("div",[i("span",{staticStyle:{"font-size":"12pt",color:"rgb(227, 0, 0)"}},[t._v("threading.local 会根据线程id为每一个线程创建一块内存空间（即：每一个线程都有一块独立的内存空间进行数据的存储）")])])])]),i("div",[i("br")]),i("ul",[i("li",[i("div",[i("span",{staticStyle:{"font-size":"12pt"}},[i("span",{staticStyle:{"font-size":"12pt",color:"rgb(227, 0, 0)"}},[t._v("threading.local 只能为线程开辟空间")])])])])]),i("div",[i("br")]),i("div",[i("span",{staticStyle:{"font-size":"14pt","white-space":"pre-wrap","font-weight":"bold"}},[t._v("3.")]),t._v(" "),i("span",{staticStyle:{"font-size":"14pt","font-weight":"bold"}},[t._v("作用")])]),i("div",[i("span",{staticStyle:{"font-size":"14pt"}},[i("br")])]),i("ul",[i("li",[i("div",[i("span",{staticStyle:{"font-size":"12pt",color:"rgb(227, 0, 0)"}},[t._v("为每一个线程创建一个独立的内存空间，使得线程对自己的内存中的数据进行操作，实现了线程与线程之间的数据隔离")])])])]),i("div",[i("br")]),i("div",[i("span",{staticStyle:{"font-size":"14pt","white-space":"pre-wrap","font-weight":"bold"}},[t._v("4")]),i("span",{staticStyle:{"white-space":"pre-wrap","font-size":"14pt","font-weight":"bold"}},[t._v(".")]),i("span",{staticStyle:{"font-size":"14pt","font-weight":"bold"}},[t._v(" 锁 和 threading.local 的区别")])]),i("div",[i("font",{staticStyle:{"font-size":"12pt"}},[i("br")])],1),i("ul",[i("li",[i("div",[i("span",{staticStyle:{"font-size":"12pt"}},[t._v("锁: 是为了让多个线程修改同一份数据")])])])]),i("div",[i("br")]),i("ul",[i("li",[i("div",[i("span",{staticStyle:{"font-size":"12pt"}},[t._v("threading.local: 为每一个线程创建一块内存空间保存各自的数据")])])])]),i("div",[i("br")]),i("div",[i("span",{staticStyle:{"font-size":"14pt","white-space":"pre-wrap","font-weight":"bold"}},[t._v("5.")]),t._v(" "),i("span",{staticStyle:{"font-size":"14pt","font-weight":"bold"}},[t._v("引子的例子")])]),i("div",[i("span",{staticStyle:{"font-size":"14pt"}},[i("br")])]),i("div",{staticStyle:{"box-sizing":"border-box",padding:"8px","font-family":'Monaco, Menlo, Consolas, "Courier New", monospace',"font-size":"12px",color:"rgb(51, 51, 51)","border-radius":"4px","background-color":"rgb(251, 250, 248)",border:"1px solid rgba(0, 0, 0, 0.15)","-en-codeblock":"true"}},[i("div",[t._v("import threading")]),i("div",[i("br")]),i("div",[t._v("v = 0")]),i("div",[i("br")]),i("div",[i("br")]),i("div",[t._v("def task(i):")]),i("div",[t._v("    global v")]),i("div",[t._v("    v = i")]),i("div",[t._v("    print(v)  "),i("font",{attrs:{color:"#41AD1C"}},[t._v("# 打印结果: 0, 1, 2, 3, 4, 5, 6, 7, 8, 9")])],1),i("div",[i("br")]),i("div",[i("br")]),i("div",[t._v("for i in range(10):")]),i("div",[t._v("    t = threading.Thread(target=task, args=[i])  "),i("font",{staticStyle:{color:"rgb(65, 173, 28)"}},[t._v("# 开启10个线程执行task函数")])],1),i("div",[t._v("    t.start()")])]),i("div",[i("br")]),i("ul",[i("li",[i("div",[t._v("此时上面的打印结果看不出任何的问题是因为执行的速度太快了，如果执行速度太快，那么它们取到的值有可能是不一样的")])])]),i("div",[i("br")]),i("ul",[i("li",[i("div",[t._v("只要在打印结果之前执行以下 time.sleep 就可以看到效果了 ")])])]),i("div",[i("br")]),i("div",{staticStyle:{"box-sizing":"border-box",padding:"8px","font-family":'Monaco, Menlo, Consolas, "Courier New", monospace',"font-size":"12px",color:"rgb(51, 51, 51)","border-radius":"4px","background-color":"rgb(251, 250, 248)",border:"1px solid rgba(0, 0, 0, 0.15)","-en-codeblock":"true"}},[i("div",[t._v("import threading")]),i("div",[t._v("import time")]),i("div",[i("br")]),i("div",[t._v("v = 0")]),i("div",[i("br")]),i("div",[i("br")]),i("div",[t._v("def task(i):")]),i("div",[t._v("    global v")]),i("div",[t._v("    v = i")]),i("div",[t._v("    time.sleep(2)")]),i("div",[t._v("    print(v)  "),i("font",{attrs:{color:"#41AD1C"}},[t._v("# 打印结果: 9, 9, 9, 9, 9, 9, 9, 9, 9, 9")])],1),i("div",[i("br")]),i("div",[i("br")]),i("div",[t._v("for i in range(10):")]),i("div",[t._v("    t = threading.Thread(target=task, args=[i]) "),i("font",{attrs:{color:"#41AD1C"}},[t._v(" # 开启10个线程执行task函数")])],1),i("div",[t._v("    t.start()")])]),i("div",[i("br")]),i("div",[i("span",{staticStyle:{"font-size":"14pt","white-space":"pre-wrap","font-weight":"bold"}},[t._v("6.")]),t._v(" "),i("span",{staticStyle:{"font-size":"14pt","font-weight":"bold"}},[t._v("threading.local 的使用")])]),i("div",[i("span",{staticStyle:{"font-size":"14pt"}},[i("br")])]),i("ul",[i("li",[i("div",[i("span",{staticStyle:{"font-size":"12pt"}},[t._v("使用 threading.local 解决引子的问题")])])])]),i("div",[i("br")]),i("div",{staticStyle:{"box-sizing":"border-box",padding:"8px","font-family":'Monaco, Menlo, Consolas, "Courier New", monospace',"font-size":"12px",color:"rgb(51, 51, 51)","border-radius":"4px","background-color":"rgb(251, 250, 248)",border:"1px solid rgba(0, 0, 0, 0.15)","-en-codeblock":"true"}},[i("div",[t._v("import threading")]),i("div",[t._v("import time")]),i("div",[t._v("from threading import local")]),i("div",[i("br")]),i("div",[i("font",{attrs:{color:"#FA7A00"}},[t._v("local_obj = local()")]),t._v(" "),i("font",{attrs:{color:"#41AD1C"}},[t._v(" # 实例化local对象")])],1),i("div",[i("br")]),i("div",[i("br")]),i("div",[t._v("def task(i):")]),i("div",[i("font",{attrs:{color:"#FA7A00"}},[t._v("local_obj.abc = i ")]),t._v(" "),i("font",{attrs:{color:"#41AD1C"}},[t._v("# 将值赋值给local对象上的自定义属性上")])],1),i("div",[t._v("    time.sleep(2)")]),i("div",[t._v("    print(local_obj.abc)  "),i("font",{staticStyle:{color:"rgb(65, 173, 28)"}},[t._v("# 打印结果: 0, 3, 2, 4, 5, 1, 9, 6, 8, 7 -> 没有按照顺序打印是因为线程的调用顺序是由CPU来决定的")])],1),i("div",[i("br")]),i("div",[i("br")]),i("div",[t._v("for i in range(10):")]),i("div",[t._v("    t = threading.Thread(target=task, args=[i])  "),i("font",{attrs:{color:"#41AD1C"}},[t._v("# 开启10个线程执行task函数")])],1),i("div",[t._v("    t.start()")])]),i("div",[i("br")]),i("div",[i("span",{staticStyle:{"font-size":"14pt","white-space":"pre-wrap","font-weight":"bold"}},[t._v("7.")]),t._v(" "),i("span",{staticStyle:{"font-size":"14pt","font-weight":"bold"}},[t._v("自定义 ")]),i("span",{staticStyle:{"font-size":"14pt","font-weight":"bold"}},[t._v("threading.local 的功能")])]),i("div",[i("span",{staticStyle:{"font-size":"14pt"}},[i("br")])]),i("ul",[i("li",[i("div",[t._v("函数写法")])])]),i("div",[i("br")]),i("ul",[i("ul",[i("li",[i("div",[t._v("思路: 将 线程唯一标识 作为key，所要保存的值作为 value，存储在字典中")])])])]),i("div",[i("br")]),i("div",{staticStyle:{"box-sizing":"border-box",padding:"8px","font-family":'Monaco, Menlo, Consolas, "Courier New", monospace',"font-size":"12px",color:"rgb(51, 51, 51)","border-radius":"4px","background-color":"rgb(251, 250, 248)",border:"1px solid rgba(0, 0, 0, 0.15)","-en-codeblock":"true"}},[i("div",[t._v("import threading  "),i("font",{attrs:{color:"#41AD1C"}},[t._v("# 线程模块")])],1),i("div",[t._v("import time")]),i("div",[i("br")]),i("div",[t._v("DIC = {}")]),i("div",[i("br")]),i("div",[i("font",{attrs:{color:"#41AD1C"}},[t._v('"""')])],1),i("div",[i("font",{attrs:{color:"#41AD1C"}},[t._v("DIC = {")])],1),i("div",[i("font",{attrs:{color:"#41AD1C"}},[t._v("    5104: {'xxx': 2},")])],1),i("div",[i("font",{attrs:{color:"#41AD1C"}},[t._v("    14432: {'xxx': 4},")])],1),i("div",[i("font",{attrs:{color:"#41AD1C"}},[t._v("    13940: {'xxx': 7}")])],1),i("div",[i("font",{attrs:{color:"#41AD1C"}},[t._v("    ……")])],1),i("div",[i("font",{attrs:{color:"#41AD1C"}},[t._v("}")])],1),i("div",[i("font",{attrs:{color:"#41AD1C"}},[t._v('"""')])],1),i("div",[i("br")]),i("div",[i("br")]),i("div",[t._v("def task(i):")]),i("div",[t._v("    get_ident = threading.get_ident()  "),i("font",{attrs:{color:"#41AD1C"}},[t._v("# 获取线程的唯一标识")])],1),i("div",[t._v("    if get_ident in DIC:")]),i("div",[t._v("        DIC[get_ident]['xxx'] = i")]),i("div",[t._v("    else:")]),i("div",[t._v("        DIC[get_ident] = {'xxx': i}")]),i("div",[t._v("    time.sleep(2)")]),i("div",[t._v("    print(DIC[get_ident]['xxx'])  "),i("font",{attrs:{color:"#41AD1C"}},[t._v("# 打印结果: 0, 3, 2, 4, 5, 1, 9, 6, 8, 7 -> 没有按照顺序打印是因为线程的调用顺序是由CPU来决定的")])],1),i("div",[i("br")]),i("div",[i("br")]),i("div",[t._v("for i in range(10):")]),i("div",[t._v("    t = threading.Thread(target=task, args=[i])")]),i("div",[t._v("    t.start()")])]),i("div",[i("span",{staticStyle:{"font-size":"14pt"}},[i("br")])]),i("ul",[i("li",[i("div",[t._v("类写法")])])]),i("div",[i("br")]),i("ul",[i("ul",[i("li",[i("div",[i("span",{staticStyle:{"font-size":"12pt"}},[t._v("自定义一个类似于 threading.local 的类，且在这基础上添加了支持协程的功能")])])])])]),i("div",[i("br")]),i("ul",[i("ul",[i("li",[i("div",[t._v("思路: 将 线程唯一标识 或 协程唯一标识 作为key，所要保存的值作为 value，存储在字典中")])])])]),i("div",[i("br")]),i("div",{staticStyle:{"box-sizing":"border-box",padding:"8px","font-family":'Monaco, Menlo, Consolas, "Courier New", monospace',"font-size":"12px",color:"rgb(51, 51, 51)","border-radius":"4px","background-color":"rgb(251, 250, 248)",border:"1px solid rgba(0, 0, 0, 0.15)","-en-codeblock":"true"}},[i("div",[t._v("import threading  "),i("font",{attrs:{color:"#41AD1C"}},[t._v("# 线程模块")])],1),i("div",[t._v("import time")]),i("div",[i("br")]),i("div",[i("br")]),i("div",[i("font",{attrs:{color:"#41AD1C"}},[t._v("# 创建一个类似于 threading.local 的类")])],1),i("div",[t._v("class Local(object):")]),i("div",[t._v("    DIC = {}")]),i("div",[i("font",{attrs:{color:"#41AD1C"}},[t._v('"""')])],1),i("div",[i("font",{attrs:{color:"#41AD1C"}},[t._v("    DIC = {")])],1),i("div",[i("font",{attrs:{color:"#41AD1C"}},[t._v("        5104: {'xxx': 2},")])],1),i("div",[i("font",{attrs:{color:"#41AD1C"}},[t._v("        14432: {'xxx': 4},")])],1),i("div",[i("font",{attrs:{color:"#41AD1C"}},[t._v("        13940: {'xxx': 7}")])],1),i("div",[i("font",{attrs:{color:"#41AD1C"}},[t._v("        ……")])],1),i("div",[i("font",{attrs:{color:"#41AD1C"}},[t._v("    }")])],1),i("div",[i("font",{attrs:{color:"#41AD1C"}},[t._v('    """')])],1),i("div",[i("br")]),i("div",[i("font",{attrs:{color:"#41AD1C"}},[t._v("# 获取线程或协程的唯一标识")])],1),i("div",[t._v("    def get_ident(self):")]),i("div",[i("font",{attrs:{color:"#41AD1C"}},[t._v("# 如果有协程就优先使用协程，如果没有就使用线程")])],1),i("div",[t._v("        try:")]),i("div",[t._v("            import greenlet  "),i("font",{attrs:{color:"#41AD1C"}},[t._v("# 因为 greenlet 是第三方模块")])],1),i("div",[t._v("            get_ident = greenlet.getcurrent  "),i("font",{attrs:{color:"#41AD1C"}},[t._v("# 获取协程的唯一标识（其实是一个函数）")])],1),i("div",[t._v("        except Exception as e:")]),i("div",[t._v("            get_ident = threading.get_ident()  "),i("font",{attrs:{color:"#41AD1C"}},[t._v("# 获取线程的唯一标识")])],1),i("div",[t._v("        return get_ident")]),i("div",[i("br")]),i("div",[i("font",{attrs:{color:"#41AD1C"}},[t._v(" # 获取值")])],1),i("div",[t._v("    def __getattr__(self, item):")]),i("div",[t._v("        ident = self.get_ident()")]),i("div",[t._v("        if ident in self.DIC:")]),i("div",[t._v("            return self.DIC[ident].get(item)")]),i("div",[i("br")]),i("div",[i("font",{attrs:{color:"#41AD1C"}},[t._v(" # 设置值")])],1),i("div",[t._v("    def __setattr__(self, key, value):")]),i("div",[t._v("        ident = self.get_ident()")]),i("div",[t._v("        if ident in self.DIC:")]),i("div",[t._v("            self.DIC[ident][key] = value")]),i("div",[t._v("        else:")]),i("div",[t._v("            self.DIC[ident] = {key: value}")]),i("div",[i("br")]),i("div",[i("br")]),i("div",[t._v("local_obj = Local()  "),i("font",{attrs:{color:"#41AD1C"}},[t._v("# 实例化local对象")])],1),i("div",[i("br")]),i("div",[i("br")]),i("div",[t._v("def task(i):")]),i("div",[t._v("    local_obj.abc = i")]),i("div",[t._v("    time.sleep(2)")]),i("div",[t._v("    print(local_obj.abc)  "),i("font",{attrs:{color:"#41AD1C"}},[t._v("# 打印结果: 0, 3, 2, 4, 5, 1, 9, 6, 8, 7 -> 没有按照顺序打印是因为线程的调用顺序是由CPU来决定的")])],1),i("div",[i("br")]),i("div",[i("br")]),i("div",[t._v("for i in range(10):")]),i("div",[t._v("    t = threading.Thread(target=task, args=[i])")]),i("div",[t._v("    t.start()")])]),i("div",[i("br")]),i("h2",{staticStyle:{margin:"10px 0px 12px",padding:"0px 0px 0px 15px","font-size":"21px","background-color":"#3eaf7c","border-radius":"3px","text-align":"center","text-shadow":"rgb(34, 34, 34) 1px 1px 2px","letter-spacing":"normal",orphans:"2","text-indent":"0px","text-transform":"none","white-space":"normal",widows:"2","word-spacing":"0px","-webkit-text-stroke-width":"0px"}},[i("span",{staticStyle:{"font-size":"21px","background-color":"#3eaf7c","border-radius":"3px","text-shadow":"rgb(34, 34, 34) 1px 1px 2px","letter-spacing":"normal",orphans:"2","text-indent":"0px","text-transform":"none","white-space":"normal",widows:"2","word-spacing":"0px","-webkit-text-stroke-width":"0px",color:"white","font-family":'"Helvetica Neue", Helvetica, Verdana, Arial, sans-serif',"font-variant-caps":"normal","font-variant-ligatures":"normal","font-weight":"bold","line-height":"1.5"}},[t._v("Flask的上下文管理机制的介绍")])])]),i("div",[i("br")]),i("div",[i("span",{staticStyle:{"font-size":"14pt","white-space":"pre-wrap","font-weight":"bold"}},[t._v("1.")]),t._v(" "),i("span",{staticStyle:{"font-size":"14pt","font-weight":"bold"}},[t._v("介绍")])]),i("div",[i("span",{staticStyle:{"font-size":"14pt"}},[i("br")])]),i("ul",[i("li",[i("div",[i("span",{staticStyle:{"font-size":"12pt"}},[t._v("Flask的上下文管理机制类似于 threading.local")])])])]),i("div",[i("br")]),i("ul",[i("li",[i("div",[i("span",{staticStyle:{"font-size":"12pt"}},[t._v("Flask的上下文管理机制的写法类似于 threading.local 章节中的 自定义 threading.local 的功能 -> 类写法")])])])]),i("div",[i("br")]),i("ul",[i("li",[i("div",[i("span",{staticStyle:{"font-size":"12pt",color:"rgb(227, 0, 0)"}},[t._v("根据线程或协程的唯一标识为每一个线程或协程创建一块内存空间（即：每一个线程或协程都有一块独立的内存空间进行数据的存储）")])])])]),i("div",[i("br")]),i("ul",[i("li",[i("div",[i("span",{staticStyle:{"font-size":"12pt"}},[t._v("Flask的上下文管理机制可以")]),i("span",{staticStyle:{"font-size":"12pt"}},[t._v("为线程或协程开辟空间")])])])]),i("div",[i("br")]),i("ul",[i("li",[i("div",[t._v("通俗理解上下文管理机制: 每个线程或协程都有自己的内存空间保存自身对应的数据")])])]),i("div",[i("br")]),i("div",[i("span",{staticStyle:{"font-size":"14pt","white-space":"pre-wrap","font-weight":"bold"}},[t._v("2.")]),t._v(" "),i("span",{staticStyle:{"font-size":"14pt","font-weight":"bold"}},[t._v("作用")])]),i("div",[i("br")]),i("ul",[i("li",[i("div",[i("span",{staticStyle:{"font-size":"12pt",color:"rgb(227, 0, 0)"}},[t._v("为每一个线程或协程创建一个独立的内存空间，使得线程或协程对自己的内存中的数据进行操作，实现了（线程/协程")]),i("span",{staticStyle:{"font-size":"12pt",color:"rgb(227, 0, 0)"}},[t._v("）")]),i("span",{staticStyle:{"font-size":"12pt",color:"rgb(227, 0, 0)"}},[t._v("与（线程/协程")]),i("span",{staticStyle:{"font-size":"12pt",color:"rgb(227, 0, 0)"}},[t._v("）")]),i("span",{staticStyle:{"font-size":"12pt",color:"rgb(227, 0, 0)"}},[t._v("之间的数据隔离")])])])]),i("div",[i("br")]),i("h2",{staticStyle:{margin:"10px 0px 12px",padding:"0px 0px 0px 15px","font-size":"21px","background-color":"#3eaf7c","border-radius":"3px","text-align":"center","text-shadow":"rgb(34, 34, 34) 1px 1px 2px","letter-spacing":"normal",orphans:"2","text-indent":"0px","text-transform":"none","white-space":"normal",widows:"2","word-spacing":"0px","-webkit-text-stroke-width":"0px"}},[i("span",{staticStyle:{"font-size":"21px","background-color":"#3eaf7c","border-radius":"3px","text-shadow":"rgb(34, 34, 34) 1px 1px 2px","letter-spacing":"normal",orphans:"2","text-indent":"0px","text-transform":"none","white-space":"normal",widows:"2","word-spacing":"0px","-webkit-text-stroke-width":"0px",color:"white","font-family":'"Helvetica Neue", Helvetica, Verdana, Arial, sans-serif',"font-variant-caps":"normal","font-variant-ligatures":"normal","font-weight":"bold","line-height":"1.5"}},[t._v("Flask的请求上下文管理机制")])]),i("div",[i("br")]),i("div",[i("span",{staticStyle:{"font-size":"14pt","white-space":"pre-wrap","font-weight":"bold"}},[t._v("1.")]),t._v(" "),i("span",{staticStyle:{"font-size":"14pt","font-weight":"bold"}},[t._v("Flask ")]),i("span",{staticStyle:{"font-size":"14pt","font-weight":"bold"}},[t._v("请求")]),i("span",{staticStyle:{"font-size":"14pt","font-weight":"bold"}},[t._v("上下文管理机制的说明")])]),i("div",[i("span",{staticStyle:{"font-size":"14pt"}},[i("br")])]),i("ul",[i("li",[i("div",[t._v("请求上下文包含了: request、session")])])]),i("div",[i("br")]),i("ul",[i("li",[i("div",[i("span",{staticStyle:{color:"rgb(227, 0, 0)","font-weight":"bold"}},[t._v("注意: 请求上下文和app上下文所使用的 Local LocalStack LocalProxy 都是同一个类（即: 请求上下文 和 app上下文所生成的数据都会保存在同一个 __storage__ 字典内）")])])])]),i("div",[i("br")]),i("div",[i("span",{staticStyle:{"font-size":"14pt","white-space":"pre-wrap","font-weight":"bold"}},[t._v("2.")]),t._v(" "),i("span",{staticStyle:{"font-size":"14pt","font-weight":"bold"}},[t._v("Flask 请求上下文管理机制重要源码分析")])]),i("div",[i("span",{staticStyle:{"font-size":"14pt"}},[i("br")])]),i("ul",[i("li",[i("div",[t._v("类和方法的说明:")])])]),i("div",[i("br")]),i("ul",[i("ul",[i("li",[i("div",[i("span",{staticStyle:{color:"rgb(65, 173, 28)"}},[t._v("Local 类")]),t._v(": 为每个线程或协程开辟各自的空间储存数据")])]),i("ul",[i("li",[i("div",[t._v("通俗理解: Local 类创建了一个名为 __storage__ 字典存储着每个线程或协程的数据")])])])])]),i("div",[i("br")]),i("ul",[i("ul",[i("li",[i("div",[i("span",{staticStyle:{color:"rgb(65, 173, 28)"}},[t._v("LocalStack 类")]),t._v(": 帮助我们对 __storage__ 字典下的 stack 列表维护成一个栈（即: 后进先出）")])]),i("ul",[i("li",[i("div",[t._v("通俗理解: 帮助我们对 __storage__ 字典下的 stack 列表进行添加和删除操作")])])])])]),i("div",[i("br")]),i("ul",[i("ul",[i("li",[i("div",[i("span",{staticStyle:{color:"rgb(65, 173, 28)"}},[t._v("RequestContext 类")]),t._v(": 存储着request请求信息和session等其他相关方法的类")])]),i("ul",[i("li",[i("div",[t._v("通俗理解: 实例化一个 RequestContext 类得到一个 ctx 对象，且ctx对象下有request请求信息和session等其他相关方法，然后将该ctx对象保存在 __storage__ 字典下指定线程或协程下的 stack 列表里")])])])])]),i("div",[i("br")]),i("ul",[i("ul",[i("li",[i("div",[i("span",{staticStyle:{color:"rgb(65, 173, 28)"}},[t._v("LocalProxy 类")]),t._v(": 对 ctx 对象（即: request_context 对象）下的 request session 进行操作（即: 增删改查）")])]),i("ul",[i("li",[i("div",[t._v("通俗理解: 调用在 _lookup_req_object 函数的基础上所创建的偏函数获取到 ctx 对象，然后对 ctx 对象（即: request_context 对象）下的 request session 进行操作（即: 增删改查）")])])])])]),i("div",[i("br")]),i("ul",[i("ul",[i("li",[i("div",[i("span",{staticStyle:{color:"rgb(65, 173, 28)"}},[t._v("_lookup_req_object 函数")]),t._v(": 调用 LocalStack 下的 top 方法获取 __storage__ 下的 ctx 对象（即：request_context对象）中指定的属性（如: request、session）")])]),i("ul",[i("li",[i("div",[t._v("通俗理解: 通过 _lookup_req_object 函数可以获取到保存在 __storage__ 字典下指定线程或协程下的 stack 列表里 ctx 对象中的指定属性")])])])])]),i("div",[i("br")]),i("ul",[i("li",[i("div",[t._v("所存储的数据结构")])])]),i("div",[i("br")]),i("div",{staticStyle:{"box-sizing":"border-box",padding:"8px","font-family":'Monaco, Menlo, Consolas, "Courier New", monospace',"font-size":"12px",color:"rgb(51, 51, 51)","border-radius":"4px","background-color":"rgb(251, 250, 248)",border:"1px solid rgba(0, 0, 0, 0.15)","-en-codeblock":"true"}},[i("div",[t._v("__storage__ = {")]),i("div",[t._v("    '线程或协程的唯一标识': {'stack': [ctx, xxx, xxx]},")]),i("div",[t._v("    '线程或协程的唯一标识': {'stack': [ctx, xxx, xxx]},")]),i("div",[t._v("    '线程或协程的唯一标识': {'stack': [ctx, xxx, xxx]},")]),i("div",[i("font",{attrs:{color:"#41AD1C"}},[t._v("……")])],1),i("div",[t._v("}")])]),i("div",[i("span",{staticStyle:{"font-size":"14pt"}},[i("br")])]),i("ul",[i("li",[i("div",[t._v("查看重要源码")])])]),i("div",[i("br")]),i("div",{staticStyle:{"box-sizing":"border-box",padding:"8px","font-family":'Monaco, Menlo, Consolas, "Courier New", monospace',"font-size":"12px",color:"rgb(51, 51, 51)","border-radius":"4px","background-color":"rgb(251, 250, 248)",border:"1px solid rgba(0, 0, 0, 0.15)","-en-codeblock":"true"}},[i("div",[t._v("from flask import globals")])]),i("div",[i("span",{staticStyle:{"font-size":"14pt"}},[i("br")])]),i("ul",[i("li",[i("div",[t._v("重要的源代码")])])]),i("div",[i("br")]),i("div",{staticStyle:{"box-sizing":"border-box",padding:"8px","font-family":'Monaco, Menlo, Consolas, "Courier New", monospace',"font-size":"12px",color:"rgb(51, 51, 51)","border-radius":"4px","background-color":"rgb(251, 250, 248)",border:"1px solid rgba(0, 0, 0, 0.15)","-en-codeblock":"true"}},[i("div",[i("font",{attrs:{color:"#41AD1C"}},[t._v("# f.py")])],1),i("div",[i("br")]),i("div",[t._v("import functools")]),i("div",[i("br")]),i("div",[i("span",{staticStyle:{color:"rgb(65, 173, 28)"}},[t._v("# 如果有协程就使用协程，如果没有则使用线程")])]),i("div",[t._v("try:")]),i("div",[t._v("    from greenlet import getcurrent as get_ident")]),i("div",[t._v("except ImportError:")]),i("div",[t._v("    try:")]),i("div",[t._v("        from thread import get_ident")]),i("div",[t._v("    except ImportError:")]),i("div",[t._v("        from _thread import get_ident")]),i("div",[i("br")]),i("div",[i("br")]),i("div",[i("span",{staticStyle:{color:"rgb(227, 0, 0)"}},[t._v("# 为每个线程或协程开辟各自的空间储存数据")])]),i("div",[t._v("class "),i("span",{staticStyle:{color:"rgb(250, 122, 0)"}},[t._v("Local")]),t._v("(object):")]),i("div",[t._v('    __slots__ = ("__storage__", "__ident_func__")  '),i("span",{staticStyle:{color:"rgb(65, 173, 28)"}},[t._v("# 设置对象允许访问的变量或方法")])]),i("div",[i("br")]),i("div",[t._v("    def __init__(self):")]),i("div",[i("span",{staticStyle:{color:"rgb(65, 173, 28)"}},[t._v(" # 调用 object.__setattr__ 方法，先将 __storage__ 和 __ident_func__ 的属性值添加到 Local 类中，然后 __setattr__ 或 __delattr__ 就可以进行调用")])]),i("div",[t._v('        object.__setattr__(self, "__storage__", {})  '),i("span",{staticStyle:{color:"rgb(65, 173, 28)"}},[t._v("# __storage__ 用于存储各个线程或协程的数据的字典")])]),i("div",[i("span",{staticStyle:{color:"rgb(65, 173, 28)"}},[t._v(' """')])]),i("div",[i("span",{staticStyle:{color:"rgb(65, 173, 28)"}},[t._v("            __storage__ 初始化的数据结构")])]),i("div",[i("span",{staticStyle:{color:"rgb(65, 173, 28)"}},[t._v("            __storage__ = {}")])]),i("div",[i("span",{staticStyle:{color:"rgb(65, 173, 28)"}})]),i("div",[i("span",{staticStyle:{color:"rgb(65, 173, 28)"}},[t._v("            __storage__ 添加数据后的数据结构")])]),i("div",[i("span",{staticStyle:{color:"rgb(65, 173, 28)"}},[t._v("            __storage__ = {")])]),i("div",[i("span",{staticStyle:{color:"rgb(65, 173, 28)"}},[t._v("                '线程或协程的唯一标识': {key: value, ……},")])]),i("div",[i("span",{staticStyle:{color:"rgb(65, 173, 28)"}},[t._v("                '线程或协程的唯一标识': {key: value, ……},")])]),i("div",[i("span",{staticStyle:{color:"rgb(65, 173, 28)"}},[t._v("                '线程或协程的唯一标识': {key: value, ……},")])]),i("div",[i("span",{staticStyle:{color:"rgb(65, 173, 28)"}},[t._v("                ……")])]),i("div",[i("span",{staticStyle:{color:"rgb(65, 173, 28)"}},[t._v("            }")])]),i("div",[i("span",{staticStyle:{color:"rgb(65, 173, 28)"}},[t._v('        """')])]),i("div",[t._v('        object.__setattr__(self, "__ident_func__", get_ident)  '),i("span",{staticStyle:{color:"rgb(65, 173, 28)"}},[t._v("# __ident_func__ -> 获取线程或协程的唯一标记的方法")])]),i("div",[i("br")]),i("div",[i("span",{staticStyle:{color:"rgb(65, 173, 28)"}},[t._v("# 获取 __storage__ 中的值")])]),i("div",[t._v("    def __getattr__(self, name):")]),i("div",[t._v("        try:")]),i("div",[t._v("            return self.__storage__[self.__ident_func__()][name]")]),i("div",[t._v("        except KeyError:")]),i("div",[t._v("            raise AttributeError(name)")]),i("div",[i("br")]),i("div",[i("span",{staticStyle:{color:"rgb(65, 173, 28)"}},[t._v("# 添加或修改 __storage__ 中的值")])]),i("div",[t._v("    def __setattr__(self, name, value):")]),i("div",[t._v("        ident = self.__ident_func__()  "),i("span",{staticStyle:{color:"rgb(65, 173, 28)"}},[t._v("# 获取协程或线程的唯一标识")])]),i("div",[t._v("        storage = self.__storage__  "),i("span",{staticStyle:{color:"rgb(65, 173, 28)"}},[t._v("# 获取用于存储各个线程或协程的数据的字典")])]),i("div",[t._v("        try:")]),i("div",[t._v("            storage[ident][name] = value")]),i("div",[t._v("        except KeyError:")]),i("div",[t._v("            storage[ident] = {name: value}")]),i("div",[i("br")]),i("div",[i("span",{staticStyle:{color:"rgb(65, 173, 28)"}},[t._v("# 删除 __storage__ 中的值")])]),i("div",[t._v("    def __delattr__(self, name):")]),i("div",[t._v("        try:")]),i("div",[t._v("            del self.__storage__[self.__ident_func__()][name]")]),i("div",[t._v("        except KeyError:")]),i("div",[t._v("            raise AttributeError(name)")]),i("div",[i("br")]),i("div",[i("br")]),i("div",[i("span",{staticStyle:{color:"rgb(227, 0, 0)"}},[t._v("# 帮助我们对 __storage__ 字典下的 stack 列表维护成一个栈（即: 后进先出） -> 通俗理解: 帮助我们对 __storage__ 字典下的 stack 列表进行添加和删除操作")])]),i("div",[t._v("class "),i("span",{staticStyle:{color:"rgb(250, 122, 0)"}},[t._v("LocalStack")]),t._v("(object):")]),i("div",[t._v("    def __init__(self):")]),i("div",[t._v("        self._local = Local()  "),i("span",{staticStyle:{color:"rgb(65, 173, 28)"}},[t._v("# 实例化local对象")])]),i("div",[i("br")]),i("div",[i("span",{staticStyle:{color:"rgb(65, 173, 28)"}},[t._v('    """')])]),i("div",[i("span",{staticStyle:{color:"rgb(65, 173, 28)"}},[t._v("        调用该类对 __storage__ 操作后的数据结构")])]),i("div",[i("span",{staticStyle:{color:"rgb(65, 173, 28)"}},[t._v("        __storage__ = {")])]),i("div",[i("span",{staticStyle:{color:"rgb(65, 173, 28)"}},[t._v("            '线程或协程的唯一标识': {'stack': [xxx, xxx, xxx]},")])]),i("div",[i("span",{staticStyle:{color:"rgb(65, 173, 28)"}},[t._v("            '线程或协程的唯一标识': {'stack': [xxx, xxx, xxx]},")])]),i("div",[i("span",{staticStyle:{color:"rgb(65, 173, 28)"}},[t._v("            '线程或协程的唯一标识': {'stack': [xxx, xxx, xxx]},")])]),i("div",[i("span",{staticStyle:{color:"rgb(65, 173, 28)"}},[t._v("            ……")])]),i("div",[i("span",{staticStyle:{color:"rgb(65, 173, 28)"}},[t._v("        }")])]),i("div",[i("span",{staticStyle:{color:"rgb(65, 173, 28)"}},[t._v('    """')])]),i("div",[i("br")]),i("div",[i("span",{staticStyle:{color:"rgb(65, 173, 28)"}},[t._v("# 往 __storage__ 中的 stack 列表添加值")])]),i("div",[t._v("    def push(self, value):")]),i("div",[t._v('        rv = getattr(self._local, "stack", None)  '),i("span",{staticStyle:{color:"rgb(65, 173, 28)"}},[t._v("# 等同于 self._local.stack -> 执行 Local 类中的 __getattr__ 方法")])]),i("div",[t._v("        if rv is None:")]),i("div",[t._v("            self._local.stack = rv = []  "),i("span",{staticStyle:{color:"rgb(65, 173, 28)"}},[t._v("# 执行 Local 类中的 __setattr__ 方法")])]),i("div",[t._v("        rv.append(value)")]),i("div",[t._v("        return rv")]),i("div",[i("br")]),i("div",[i("span",{staticStyle:{color:"rgb(65, 173, 28)"}},[t._v("# 删除 __storage__ 中的 stack 列表的值，如果 stack 列表只有一个则不进行删除，当请求结束的时候就会调用该方法删除当前线程中的指定 ctx 对象")])]),i("div",[t._v("    def pop(self):")]),i("div",[t._v('        stack = getattr(self._local, "stack", None)  '),i("span",{staticStyle:{color:"rgb(65, 173, 28)"}},[t._v("# 等同于 self._local.stack -> 执行 Local 类中的 __getattr__ 方法")])]),i("div",[t._v("        if stack is None:")]),i("div",[t._v("            return None")]),i("div",[t._v("        elif len(stack) == 1:")]),i("div",[i("span",{staticStyle:{color:"rgb(65, 173, 28)"}},[t._v("# release_local(self._local)")])]),i("div",[t._v("            return stack[-1]")]),i("div",[t._v("        else:")]),i("div",[t._v("            return stack.pop()")]),i("div",[i("br")]),i("div",[i("span",{staticStyle:{color:"rgb(65, 173, 28)"}},[t._v("# 获取 __storage__ 中的 stack 列表的值")])]),i("div",[t._v("    @property")]),i("div",[t._v("    def top(self):")]),i("div",[t._v("        try:")]),i("div",[t._v("            return self._local.stack[-1]")]),i("div",[t._v("        except (AttributeError, IndexError):")]),i("div",[t._v("            return None")]),i("div",[i("br")]),i("div",[i("br")]),i("div",[i("span",{staticStyle:{color:"rgb(227, 0, 0)"}},[t._v("# 代理")]),t._v(" "),i("font",{attrs:{color:"#E30000"}},[t._v("-> 对 ctx/app_ctx 对象（即: request_context/app_context 对象）下的 request session g app 进行操作（即: 增删改查）")])],1),i("div",[t._v("class "),i("span",{staticStyle:{color:"rgb(250, 122, 0)"}},[t._v("LocalProxy")]),t._v("(object):")]),i("div",[t._v('    __slots__ = ("__local", "__dict__", "__name__", "__wrapped__")')]),i("div",[i("br")]),i("div",[t._v("    def __init__(self, local, name=None):")]),i("div",[i("span",{staticStyle:{color:"rgb(65, 173, 28)"}},[t._v('"""')])]),i("div",[i("span",{staticStyle:{color:"rgb(65, 173, 28)"}},[t._v("        :param local:  偏函数")])]),i("div",[i("span",{staticStyle:{color:"rgb(65, 173, 28)"}},[t._v("        :param name:  request、session、g、None")])]),i("div",[i("span",{staticStyle:{color:"rgb(65, 173, 28)"}},[t._v('        """')])]),i("div",[i("br")]),i("div",[i("span",{staticStyle:{color:"rgb(65, 173, 28)"}},[t._v('        """')])]),i("div",[i("span",{staticStyle:{color:"rgb(65, 173, 28)"}},[t._v('            object.__setattr__(self, "_LocalProxy__local", local) 的解释：')])]),i("div",[i("span",{staticStyle:{color:"rgb(65, 173, 28)"}},[t._v("                1. 将 local 赋值给 _LocalProxy__local 属性，该属性可以通过 self.__local 进行访问")])]),i("div",[i("span",{staticStyle:{color:"rgb(65, 173, 28)"}},[t._v("                2. _LocalProxy__local属性名 等于 __local 属性名")])]),i("div",[i("span",{staticStyle:{color:"rgb(65, 173, 28)"}},[t._v("                3. 因为解释器会将 __local 替换为 _classname__local属性名 为确保名称不会与另一个类中的类似名称重叠的方式")])]),i("div",[i("span",{staticStyle:{color:"rgb(65, 173, 28)"}},[t._v('        """')])]),i("div",[t._v('        object.__setattr__(self, "_LocalProxy__local", local)  '),i("span",{staticStyle:{color:"rgb(65, 173, 28)"}},[t._v("# 将 local 赋值给 _LocalProxy__local 属性，该属性可以通过 self.__local 进行访问")])]),i("div",[t._v('        object.__setattr__(self, "__name__", name)  '),i("span",{staticStyle:{color:"rgb(65, 173, 28)"}},[t._v("# 将 name 赋值给 __name__ 属性")])]),i("div",[t._v('        if callable(local) and not hasattr(local, "__release_local__"):')]),i("div",[t._v('            object.__setattr__(self, "__wrapped__", local)')]),i("div",[i("br")]),i("div",[i("span",{staticStyle:{color:"rgb(65, 173, 28)"}},[t._v("# 调用偏函数获取 ctx 对象（即: request_context 对象）")])]),i("div",[t._v("    def _get_current_object(self):")]),i("div",[t._v('        if not hasattr(self.__local, "__release_local__"):')]),i("div",[t._v("            return self.__local()  "),i("span",{staticStyle:{color:"rgb(65, 173, 28)"}},[t._v("# 调用偏函数获取 ctx 对象（即: request_context 对象）")])]),i("div",[t._v("        try:")]),i("div",[t._v("            return getattr(self.__local, self.__name__)")]),i("div",[t._v("        except AttributeError:")]),i("div",[t._v('            raise RuntimeError("no object bound to %s" % self.__name__)')]),i("div",[i("br")]),i("div",[i("span",{staticStyle:{color:"rgb(65, 173, 28)"}},[t._v("# 当 LocalProxy 所实例化的对象执行了 对象.属性名 的时候就会执行该方法")])]),i("div",[t._v("    def __getattr__(self, name):")]),i("div",[t._v('        if name == "__members__":')]),i("div",[t._v("            return dir(self._get_current_object())")]),i("div",[t._v("        return getattr(self._get_current_object(), name)  "),i("span",{staticStyle:{color:"rgb(65, 173, 28)"}},[t._v("# 调用偏函数获取 ctx 对象（即: request_context 对象），然后使用反射获取 ctx 对象下的对应 request、session、g")])]),i("div",[i("br")]),i("div",[i("span",{staticStyle:{color:"rgb(65, 173, 28)"}},[t._v("# 当 LocalProxy 所实例化的对象执行了 对象.属性名=xxx 的时候就会执行该方法")])]),i("div",[t._v("    __setattr__ = lambda x, n, v: setattr(x._get_current_object(), n, v)")]),i("div",[i("span",{staticStyle:{color:"rgb(65, 173, 28)"}},[t._v("# 当 LocalProxy 所实例化的对象执行了 del 对象.属性名 的时候就会执行该方法")])]),i("div",[t._v("    __delattr__ = lambda x, n: delattr(x._get_current_object(), n)")]),i("div",[i("span",{staticStyle:{color:"rgb(65, 173, 28)"}},[t._v("# 当 LocalProxy 所实例化的对象执行了 print/str(对象.属性名) 的时候就会执行该方法")])]),i("div",[t._v("    __str__ = lambda x: str(x._get_current_object())")]),i("div",[i("br")]),i("div",[i("br")]),i("div",[i("span",{staticStyle:{color:"rgb(65, 173, 28)"}},[t._v("# request 类")])]),i("div",[t._v("class Request(object):")]),i("div",[t._v("    def __init__(self):")]),i("div",[t._v("        self.method = 'GET'")]),i("div",[t._v("        self.form = 123")]),i("div",[i("br")]),i("div",[i("br")]),i("div",[i("span",{staticStyle:{color:"rgb(65, 173, 28)"}},[t._v("# session 类")])]),i("div",[t._v("class Session(object):")]),i("div",[t._v("    def __init__(self):")]),i("div",[t._v("        self.name = 'Kevin'")]),i("div",[t._v("        self.age = 18")]),i("div",[i("br")]),i("div",[i("br")]),i("div",[i("span",{staticStyle:{color:"rgb(227, 0, 0)"}},[t._v("# 一个拥有request和session信息的类")])]),i("div",[t._v("class "),i("span",{staticStyle:{color:"rgb(250, 122, 0)"}},[t._v("RequestContext")]),t._v("(object):")]),i("div",[t._v("    def __init__(self):")]),i("div",[t._v("        self.request = Request()")]),i("div",[t._v("        self.session = Session()")]),i("div",[i("br")]),i("div",[i("br")]),i("div",[i("span",{staticStyle:{color:"rgb(250, 122, 0)"}},[t._v("_request_ctx_stack = LocalStack()  ")]),i("span",{staticStyle:{color:"rgb(65, 173, 28)"}},[t._v("# 实例化 LocalStack 得到 _request_ctx_stack 对象")])]),i("div",[i("span",{staticStyle:{color:"rgb(250, 122, 0)"}},[t._v("request_context = RequestContext()  ")]),i("span",{staticStyle:{color:"rgb(65, 173, 28)"}},[t._v("# 实例化一个 request_context 对象，里面拥有 request 和 session 等属性")])]),i("div",[i("span",{staticStyle:{color:"rgb(250, 122, 0)"}},[t._v("_request_ctx_stack.push(request_context)  ")]),i("span",{staticStyle:{color:"rgb(65, 173, 28)"}},[t._v("# 将 request_context 对象，添加到 __storage__ 中的 stack 列表中")])]),i("div",[i("br")]),i("div",[i("br")]),i("div",[i("span",{staticStyle:{color:"rgb(227, 0, 0)"}},[t._v("# 调用 LocalStack 下的 top 方法获取 __storage__ 下的 request_context")]),t._v(" "),i("font",{attrs:{color:"#E30000"}},[t._v("对象，然后根据传入的属性名通过反射获取 request_context 对象下对应的属性值")])],1),i("div",[t._v("def "),i("span",{staticStyle:{color:"rgb(250, 122, 0)"}},[t._v("_lookup_req_object")]),t._v("(name):")]),i("div",[t._v("    ctx = _request_ctx_stack.top  "),i("span",{staticStyle:{color:"rgb(65, 173, 28)"}},[t._v("# 调用 LocalStack 下的 top 方法获取 __storage__")]),t._v(" "),i("font",{attrs:{color:"#41AD1C"}},[t._v("下的 ctx 对象（即：request_context 对象）")])],1),i("div",[t._v("    return getattr(ctx, name) "),i("span",{staticStyle:{color:"rgb(65, 173, 28)"}},[t._v(" # 等同于 ctx.request 或者 ctx.session")])]),i("div",[i("br")]),i("div",[i("br")]),i("div",[i("span",{staticStyle:{color:"rgb(255, 0, 0)"}},[t._v("# 通过 LocalProxy 对 ctx 对象（即: request_context 对象）下的 request session 进行操作（即: 增删改查）")])]),i("div",[i("span",{staticStyle:{color:"rgb(250, 122, 0)"}},[t._v("request = LocalProxy(functools.partial(_lookup_req_object, 'request'))")])]),i("div",[i("span",{staticStyle:{color:"rgb(250, 122, 0)"}},[t._v("session = LocalProxy(functools.partial(_lookup_req_object, 'session'))")])])]),i("div",[i("br")]),i("ul",[i("li",[i("div",[t._v("获取 request 或 session 的方式一")])])]),i("div",[i("br")]),i("ul",[i("ul",[i("li",[i("div",[t._v("在视图函数中也可以通过 flask.globals._request_ctx_stack 中的 _request_ctx_stack 进行获取")])])])]),i("div",[i("br")]),i("div",{staticStyle:{"box-sizing":"border-box",padding:"8px","font-family":'Monaco, Menlo, Consolas, "Courier New", monospace',"font-size":"12px",color:"rgb(51, 51, 51)","border-radius":"4px","background-color":"rgb(251, 250, 248)",border:"1px solid rgba(0, 0, 0, 0.15)","-en-codeblock":"true"}},[i("div",[i("font",{attrs:{color:"#41AD1C"}},[t._v("# v.py")])],1),i("div",[i("br")]),i("div",[t._v("from f import _request_ctx_stack")]),i("div",[i("br")]),i("div",[t._v("request = _request_ctx_stack.top.request")]),i("div",[t._v("print(request.method)  "),i("font",{attrs:{color:"#41AD1C"}},[t._v("# GET")])],1),i("div",[i("br")]),i("div",[t._v("session = _request_ctx_stack.top.session")]),i("div",[t._v("print(session.name)  "),i("font",{attrs:{color:"#41AD1C"}},[t._v("# Kevin")])],1)]),i("div",[i("br")]),i("ul",[i("li",[i("div",[t._v("获取 request 或 session 的方式二")])])]),i("div",[i("br")]),i("div",{staticStyle:{"box-sizing":"border-box",padding:"8px","font-family":'Monaco, Menlo, Consolas, "Courier New", monospace',"font-size":"12px",color:"rgb(51, 51, 51)","border-radius":"4px","background-color":"rgb(251, 250, 248)",border:"1px solid rgba(0, 0, 0, 0.15)","-en-codeblock":"true"}},[i("div",[i("font",{attrs:{color:"#41AD1C"}},[t._v("# v.py")])],1),i("div",[i("br")]),i("div",[t._v("from f import request, session")]),i("div",[i("br")]),i("div",[t._v("print(request.method)  "),i("font",{attrs:{color:"#41AD1C"}},[t._v("# GET")])],1),i("div",[t._v("print(session.name)  "),i("font",{attrs:{color:"#41AD1C"}},[t._v("# Kevin")])],1)]),i("div",[i("br")]),i("div",[i("span",{staticStyle:{"font-size":"14pt","white-space":"pre-wrap","font-weight":"bold"}},[t._v("3.")]),t._v(" "),i("span",{staticStyle:{"font-size":"14pt","font-weight":"bold"}},[t._v("Flask 请求上下文管理机制流程图")])])]),i("div",[i("span",{staticStyle:{"font-size":"14pt"}},[i("br")])]),i("ul",[i("li",[i("div",[i("span",{staticStyle:{"font-size":"12pt"}},[t._v("获取 request 或 session 的方式一")])])])]),i("div",[i("font",{staticStyle:{"font-size":"12pt"}},[i("br")])],1),i("div",[i("img",{attrs:{"data-filename":"请求上下文1.png",src:"/kevin-blog/Flask/上下文管理_files/请求上下文1.png",type:"image/png"}})]),i("div",[i("font",{staticStyle:{"font-size":"12pt"}},[i("br")])],1),i("ul",[i("li",[i("div",[i("span",{staticStyle:{"font-size":"12pt"}},[t._v("获取 request 或 session 的方式二")])])])]),i("div",[i("br")]),i("div",[i("img",{attrs:{"data-filename":"请求上下文2.png",src:"/kevin-blog/Flask/上下文管理_files/请求上下文2.png",type:"image/png"}})]),i("div",[i("br")]),i("h2",{staticStyle:{margin:"10px 0px 12px",padding:"0px 0px 0px 15px","font-size":"21px","background-color":"#3eaf7c","border-radius":"3px","text-align":"center","text-shadow":"rgb(34, 34, 34) 1px 1px 2px","letter-spacing":"normal",orphans:"2","text-indent":"0px","text-transform":"none","white-space":"normal",widows:"2","word-spacing":"0px","-webkit-text-stroke-width":"0px"}},[i("span",{staticStyle:{"font-size":"21px","background-color":"#3eaf7c","border-radius":"3px","text-shadow":"rgb(34, 34, 34) 1px 1px 2px","letter-spacing":"normal",orphans:"2","text-indent":"0px","text-transform":"none","white-space":"normal",widows:"2","word-spacing":"0px","-webkit-text-stroke-width":"0px",color:"white","font-family":'"Helvetica Neue", Helvetica, Verdana, Arial, sans-serif',"font-variant-caps":"normal","font-variant-ligatures":"normal","font-weight":"bold","line-height":"1.5"}},[t._v("Flask的app上下文管理机制")])]),i("div",[i("br")]),i("div",[i("span",{staticStyle:{"font-size":"14pt","white-space":"pre-wrap","font-weight":"bold"}},[t._v("1.")]),t._v(" "),i("span",{staticStyle:{"font-size":"14pt","font-weight":"bold"}},[t._v("Flask app")]),i("span",{staticStyle:{"font-size":"14pt","font-weight":"bold"}},[t._v("上下文管理机制的说明")])]),i("div",[i("br")]),i("ul",[i("li",[i("div",[t._v("请求上下文包含了: app、g")])])]),i("div",[i("br")]),i("ul",[i("li",[i("div",[i("span",{staticStyle:{color:"rgb(227, 0, 0)","font-weight":"bold"}},[t._v("注意: app上下文和请求上下文所使用的 Local LocalStack LocalProxy 都是同一个类（即: 请求上下文 和 app上下文所生成的数据都会保存在同一个 __storage__ 字典内）")])])])]),i("div",[i("br")]),i("div",[i("span",{staticStyle:{"font-size":"14pt","white-space":"pre-wrap","font-weight":"bold"}},[t._v("2.")]),t._v(" "),i("span",{staticStyle:{"font-size":"14pt","font-weight":"bold"}},[t._v("Flask 请求上下文管理机制重要源码分析")])]),i("div",[i("br")]),i("ul",[i("li",[i("div",[t._v("类和方法的说明:")])])]),i("div",[i("br")]),i("ul",[i("ul",[i("li",[i("div",[i("span",{staticStyle:{color:"rgb(65, 173, 28)"}},[t._v("Local 类")]),t._v(": 为每个线程或协程开辟各自的空间储存数据")])]),i("ul",[i("li",[i("div",[t._v("通俗理解: Local 类创建了一个名为 __storage__ 字典存储着每个线程或协程的数据")])])])])]),i("div",[i("br")]),i("ul",[i("ul",[i("li",[i("div",[i("span",{staticStyle:{color:"rgb(65, 173, 28)"}},[t._v("LocalStack 类")]),t._v(": 帮助我们对 __storage__ 字典下的 stack 列表维护成一个栈（即: 后进先出）")])]),i("ul",[i("li",[i("div",[t._v("通俗理解: 帮助我们对 __storage__ 字典下的 stack 列表进行添加和删除操作")])])])])]),i("div",[i("br")]),i("ul",[i("ul",[i("li",[i("div",[i("span",{staticStyle:{color:"rgb(65, 173, 28)"}},[t._v("AppContext 类")]),t._v(": 存储着app和g等其他相关方法的类")])]),i("ul",[i("li",[i("div",[t._v("通俗理解: 实例化一个 AppContext 类得到一个 app_ctx 对象，且app_ctx对象下有app和g等其他相关方法，然后将该app_ctx对象保存在 __storage__ 字典下指定线程或协程下的 stack 列表里")])])])])]),i("div",[i("br")]),i("ul",[i("ul",[i("li",[i("div",[i("span",{staticStyle:{color:"rgb(65, 173, 28)"}},[t._v("LocalProxy 类")]),t._v(": 对 app_ctx 对象（即: app_context 对象）下的 g app 进行操作（即: 增删改查）")])]),i("ul",[i("li",[i("div",[t._v("通俗理解: 调用在 _lookup_app_object 函数的基础上所创建的偏函数获取到 app_ctx 对象，然后对 app_ctx 对象（即: app_context 对象）下的 g 进行操作（即: 增删改查）")])]),i("li",[i("div",[t._v("通俗理解: 调用 _find_app 函数获取到 app_ctx 对象，然后对 app_ctx 对象（即: app_context 对象）下的 app 进行操作（即: 增删改查）")])])])])]),i("div",[i("br")]),i("ul",[i("ul",[i("li",[i("div",[i("span",{staticStyle:{color:"rgb(65, 173, 28)"}},[t._v("_lookup_app_object ")]),i("span",{staticStyle:{color:"rgb(65, 173, 28)"}},[t._v("函数")]),t._v(": 调用 LocalStack 下的 top 方法获取 __storage__ 下的 app_ctx 对象（即：app_context对象）中指定的属性（如: g 等）")])]),i("ul",[i("li",[i("div",[t._v("通俗理解: 通过 _lookup_app_object 函数可以获取到保存在 __storage__ 字典下指定线程或协程下的 stack 列表里 app_ctx 对象中的指定属性")])])])])]),i("div",[i("br")]),i("ul",[i("ul",[i("li",[i("div",[i("span",{staticStyle:{color:"rgb(65, 173, 28)"}},[t._v("_find_app 函数")]),t._v(": 调用 LocalStack 下的 top 方法获取 __storage__ 下的 app_ctx 对象（即：app_context对象）中指定的属性 app")])]),i("ul",[i("li",[i("div",[i("span",{staticStyle:{"font-size":"medium","letter-spacing":"normal",orphans:"2","text-indent":"0px","text-transform":"none","white-space":"normal",widows:"2","word-spacing":"0px","-webkit-text-stroke-width":"0px",color:"rgb(0, 0, 0)","font-family":'"Courier New"',"font-variant-caps":"normal","font-variant-ligatures":"normal"}},[t._v("通俗理解: 通过")]),t._v(" _find_app "),i("span",{staticStyle:{"font-size":"medium","letter-spacing":"normal",orphans:"2","text-indent":"0px","text-transform":"none","white-space":"normal",widows:"2","word-spacing":"0px","-webkit-text-stroke-width":"0px",color:"rgb(0, 0, 0)","font-family":'"Courier New"',"font-variant-caps":"normal","font-variant-ligatures":"normal"}},[t._v("函数可以获取到保存在 __storage__ 字典下指定线程或协程下的 stack 列表里 app_ctx 对象中的指定属性 app")])])])])])]),i("div",[i("br")]),i("ul",[i("li",[i("div",[t._v("所存储的数据结构")])])]),i("div",[i("br")]),i("div",{staticStyle:{"box-sizing":"border-box",padding:"8px","font-family":'Monaco, Menlo, Consolas, "Courier New", monospace',"font-size":"12px",color:"rgb(51, 51, 51)","border-radius":"4px","background-color":"rgb(251, 250, 248)",border:"1px solid rgba(0, 0, 0, 0.15)","-en-codeblock":"true"}},[i("div",[t._v("__storage__ = {")]),i("div",[t._v("    '线程或协程的唯一标识': {'stack': [app_ctx, xxx, xxx]},")]),i("div",[t._v("    '线程或协程的唯一标识': {'stack': [app_ctx, xxx, xxx]},")]),i("div",[t._v("    '线程或协程的唯一标识': {'stack': [app_ctx, xxx, xxx]},")]),i("div",[i("span",{staticStyle:{color:"rgb(65, 173, 28)"}},[t._v("……")])]),i("div",[t._v("}")])]),i("div",[i("br")]),i("ul",[i("li",[i("div",[t._v("查看重要源码")])])]),i("div",[i("br")]),i("div",{staticStyle:{"box-sizing":"border-box",padding:"8px","font-family":'Monaco, Menlo, Consolas, "Courier New", monospace',"font-size":"12px",color:"rgb(51, 51, 51)","border-radius":"4px","background-color":"rgb(251, 250, 248)",border:"1px solid rgba(0, 0, 0, 0.15)","-en-codeblock":"true"}},[i("div",[t._v("from flask import globals")])]),i("div",[i("br")]),i("ul",[i("li",[i("div",[t._v("重要的源代码")])])]),i("div",[i("br")]),i("div",{staticStyle:{"box-sizing":"border-box",padding:"8px","font-family":'Monaco, Menlo, Consolas, "Courier New", monospace',"font-size":"12px",color:"rgb(51, 51, 51)","border-radius":"4px","background-color":"rgb(251, 250, 248)",border:"1px solid rgba(0, 0, 0, 0.15)","-en-codeblock":"true"}},[i("div",[i("span",{staticStyle:{color:"rgb(65, 173, 28)"}},[t._v("# f.py")])]),i("div",[i("br")]),i("div",[t._v("import functools")]),i("div",[i("br")]),i("div",[i("span",{staticStyle:{color:"rgb(65, 173, 28)"}},[t._v("# 如果有协程就使用协程，如果没有则使用线程")])]),i("div",[t._v("try:")]),i("div",[t._v("    from greenlet import getcurrent as get_ident")]),i("div",[t._v("except ImportError:")]),i("div",[t._v("    try:")]),i("div",[t._v("        from thread import get_ident")]),i("div",[t._v("    except ImportError:")]),i("div",[t._v("        from _thread import get_ident")]),i("div",[i("br")]),i("div",[i("br")]),i("div",[i("span",{staticStyle:{color:"rgb(227, 0, 0)"}},[t._v("# 为每个线程或协程开辟各自的空间储存数据")])]),i("div",[t._v("class "),i("span",{staticStyle:{color:"rgb(250, 122, 0)"}},[t._v("Local")]),t._v("(object):")]),i("div",[t._v('    __slots__ = ("__storage__", "__ident_func__")  '),i("span",{staticStyle:{color:"rgb(65, 173, 28)"}},[t._v("# 设置对象允许访问的变量或方法")])]),i("div",[i("br")]),i("div",[t._v("    def __init__(self):")]),i("div",[i("span",{staticStyle:{color:"rgb(65, 173, 28)"}},[t._v(" # 调用 object.__setattr__ 方法，先将 __storage__ 和 __ident_func__ 的属性值添加到 Local 类中，然后 __setattr__ 或 __delattr__ 就可以进行调用")])]),i("div",[t._v('        object.__setattr__(self, "__storage__", {})  '),i("span",{staticStyle:{color:"rgb(65, 173, 28)"}},[t._v("# __storage__ 用于存储各个线程或协程的数据的字典")])]),i("div",[i("span",{staticStyle:{color:"rgb(65, 173, 28)"}},[t._v(' """')])]),i("div",[i("span",{staticStyle:{color:"rgb(65, 173, 28)"}},[t._v("            __storage__ 初始化的数据结构")])]),i("div",[i("span",{staticStyle:{color:"rgb(65, 173, 28)"}},[t._v("            __storage__ = {}")])]),i("div",[i("span",{staticStyle:{color:"rgb(65, 173, 28)"}})]),i("div",[i("span",{staticStyle:{color:"rgb(65, 173, 28)"}},[t._v("            __storage__ 添加数据后的数据结构")])]),i("div",[i("span",{staticStyle:{color:"rgb(65, 173, 28)"}},[t._v("            __storage__ = {")])]),i("div",[i("span",{staticStyle:{color:"rgb(65, 173, 28)"}},[t._v("                '线程或协程的唯一标识': {key: value, ……},")])]),i("div",[i("span",{staticStyle:{color:"rgb(65, 173, 28)"}},[t._v("                '线程或协程的唯一标识': {key: value, ……},")])]),i("div",[i("span",{staticStyle:{color:"rgb(65, 173, 28)"}},[t._v("                '线程或协程的唯一标识': {key: value, ……},")])]),i("div",[i("span",{staticStyle:{color:"rgb(65, 173, 28)"}},[t._v("                ……")])]),i("div",[i("span",{staticStyle:{color:"rgb(65, 173, 28)"}},[t._v("            }")])]),i("div",[i("span",{staticStyle:{color:"rgb(65, 173, 28)"}},[t._v('        """')])]),i("div",[t._v('        object.__setattr__(self, "__ident_func__", get_ident)  '),i("span",{staticStyle:{color:"rgb(65, 173, 28)"}},[t._v("# __ident_func__ -> 获取线程或协程的唯一标记的方法")])]),i("div",[i("br")]),i("div",[i("span",{staticStyle:{color:"rgb(65, 173, 28)"}},[t._v("# 获取 __storage__ 中的值")])]),i("div",[t._v("    def __getattr__(self, name):")]),i("div",[t._v("        try:")]),i("div",[t._v("            return self.__storage__[self.__ident_func__()][name]")]),i("div",[t._v("        except KeyError:")]),i("div",[t._v("            raise AttributeError(name)")]),i("div",[i("br")]),i("div",[i("span",{staticStyle:{color:"rgb(65, 173, 28)"}},[t._v("# 添加或修改 __storage__ 中的值")])]),i("div",[t._v("    def __setattr__(self, name, value):")]),i("div",[t._v("        ident = self.__ident_func__()  "),i("span",{staticStyle:{color:"rgb(65, 173, 28)"}},[t._v("# 获取协程或线程的唯一标识")])]),i("div",[t._v("        storage = self.__storage__  "),i("span",{staticStyle:{color:"rgb(65, 173, 28)"}},[t._v("# 获取用于存储各个线程或协程的数据的字典")])]),i("div",[t._v("        try:")]),i("div",[t._v("            storage[ident][name] = value")]),i("div",[t._v("        except KeyError:")]),i("div",[t._v("            storage[ident] = {name: value}")]),i("div",[i("br")]),i("div",[i("span",{staticStyle:{color:"rgb(65, 173, 28)"}},[t._v("# 删除 __storage__ 中的值")])]),i("div",[t._v("    def __delattr__(self, name):")]),i("div",[t._v("        try:")]),i("div",[t._v("            del self.__storage__[self.__ident_func__()][name]")]),i("div",[t._v("        except KeyError:")]),i("div",[t._v("            raise AttributeError(name)")]),i("div",[i("br")]),i("div",[i("br")]),i("div",[i("span",{staticStyle:{color:"rgb(227, 0, 0)"}},[t._v("# 帮助我们对 __storage__ 字典下的 stack 列表维护成一个栈（即: 后进先出） -> 通俗理解: 帮助我们对 __storage__ 字典下的 stack 列表进行添加和删除操作")])]),i("div",[t._v("class "),i("span",{staticStyle:{color:"rgb(250, 122, 0)"}},[t._v("LocalStack")]),t._v("(object):")]),i("div",[t._v("    def __init__(self):")]),i("div",[t._v("        self._local = Local()  "),i("span",{staticStyle:{color:"rgb(65, 173, 28)"}},[t._v("# 实例化local对象")])]),i("div",[i("br")]),i("div",[i("span",{staticStyle:{color:"rgb(65, 173, 28)"}},[t._v('    """')])]),i("div",[i("span",{staticStyle:{color:"rgb(65, 173, 28)"}},[t._v("        调用该类对 __storage__ 操作后的数据结构")])]),i("div",[i("span",{staticStyle:{color:"rgb(65, 173, 28)"}},[t._v("        __storage__ = {")])]),i("div",[i("span",{staticStyle:{color:"rgb(65, 173, 28)"}},[t._v("            '线程或协程的唯一标识': {'stack': [xxx, xxx, xxx]},")])]),i("div",[i("span",{staticStyle:{color:"rgb(65, 173, 28)"}},[t._v("            '线程或协程的唯一标识': {'stack': [xxx, xxx, xxx]},")])]),i("div",[i("span",{staticStyle:{color:"rgb(65, 173, 28)"}},[t._v("            '线程或协程的唯一标识': {'stack': [xxx, xxx, xxx]},")])]),i("div",[i("span",{staticStyle:{color:"rgb(65, 173, 28)"}},[t._v("            ……")])]),i("div",[i("span",{staticStyle:{color:"rgb(65, 173, 28)"}},[t._v("        }")])]),i("div",[i("span",{staticStyle:{color:"rgb(65, 173, 28)"}},[t._v('    """')])]),i("div",[i("br")]),i("div",[i("span",{staticStyle:{color:"rgb(65, 173, 28)"}},[t._v("# 往 __storage__ 中的 stack 列表添加值")])]),i("div",[t._v("    def push(self, value):")]),i("div",[t._v('        rv = getattr(self._local, "stack", None)  '),i("span",{staticStyle:{color:"rgb(65, 173, 28)"}},[t._v("# 等同于 self._local.stack -> 执行 Local 类中的 __getattr__ 方法")])]),i("div",[t._v("        if rv is None:")]),i("div",[t._v("            self._local.stack = rv = []  "),i("span",{staticStyle:{color:"rgb(65, 173, 28)"}},[t._v("# 执行 Local 类中的 __setattr__ 方法")])]),i("div",[t._v("        rv.append(value)")]),i("div",[t._v("        return rv")]),i("div",[i("br")]),i("div",[i("span",{staticStyle:{color:"rgb(65, 173, 28)"}},[t._v("# 删除 __storage__ 中的 stack 列表的值，如果 stack 列表只有一个则不")]),i("font",{attrs:{color:"#41AD1C"}},[t._v("进行删除，当请求结束的时候就会调用该方法删除当前线程中的指定 app_ctx 对象")])],1),i("div",[t._v("    def pop(self):")]),i("div",[t._v('        stack = getattr(self._local, "stack", None)  '),i("span",{staticStyle:{color:"rgb(65, 173, 28)"}},[t._v("# 等同于 self._local.stack -> 执行 Local 类中的 __getattr__ 方法")])]),i("div",[t._v("        if stack is None:")]),i("div",[t._v("            return None")]),i("div",[t._v("        elif len(stack) == 1:")]),i("div",[i("span",{staticStyle:{color:"rgb(65, 173, 28)"}},[t._v("# release_local(self._local)")])]),i("div",[t._v("            return stack[-1]")]),i("div",[t._v("        else:")]),i("div",[t._v("            return stack.pop()")]),i("div",[i("br")]),i("div",[i("span",{staticStyle:{color:"rgb(65, 173, 28)"}},[t._v("# 获取 __storage__ 中的 stack 列表的值")])]),i("div",[t._v("    @property")]),i("div",[t._v("    def top(self):")]),i("div",[t._v("        try:")]),i("div",[t._v("            return self._local.stack[-1]")]),i("div",[t._v("        except (AttributeError, IndexError):")]),i("div",[t._v("            return None")]),i("div",[i("br")]),i("div",[i("br")]),i("div",[i("span",{staticStyle:{color:"rgb(227, 0, 0)"}},[t._v("# 代理 -> 对 ctx/app_ctx 对象（即: request_context/app_context 对象）下的 request session g app 进行操作（即: 增删改查）")])]),i("div",[t._v("class "),i("span",{staticStyle:{color:"rgb(250, 122, 0)"}},[t._v("LocalProxy")]),t._v("(object):")]),i("div",[t._v('    __slots__ = ("__local", "__dict__", "__name__", "__wrapped__")')]),i("div",[i("br")]),i("div",[t._v("    def __init__(self, local, name=None):")]),i("div",[i("span",{staticStyle:{color:"rgb(65, 173, 28)"}},[t._v('"""')])]),i("div",[i("span",{staticStyle:{color:"rgb(65, 173, 28)"}},[t._v("        :param local:  偏函数")])]),i("div",[i("span",{staticStyle:{color:"rgb(65, 173, 28)"}},[t._v("        :param name:  request、session、g、None")])]),i("div",[i("span",{staticStyle:{color:"rgb(65, 173, 28)"}},[t._v('        """')])]),i("div",[i("br")]),i("div",[i("span",{staticStyle:{color:"rgb(65, 173, 28)"}},[t._v('        """')])]),i("div",[i("span",{staticStyle:{color:"rgb(65, 173, 28)"}},[t._v('            object.__setattr__(self, "_LocalProxy__local", local) 的解释：')])]),i("div",[i("span",{staticStyle:{color:"rgb(65, 173, 28)"}},[t._v("                1. 将 local 赋值给 _LocalProxy__local 属性，该属性可以通过 self.__local 进行访问")])]),i("div",[i("span",{staticStyle:{color:"rgb(65, 173, 28)"}},[t._v("                2. _LocalProxy__local属性名 等于 __local 属性名")])]),i("div",[i("span",{staticStyle:{color:"rgb(65, 173, 28)"}},[t._v("                3. 因为解释器会将 __local 替换为 _classname__local属性名 为确保名称不会与另一个类中的类似名称重叠的方式")])]),i("div",[i("span",{staticStyle:{color:"rgb(65, 173, 28)"}},[t._v('        """')])]),i("div",[t._v('        object.__setattr__(self, "_LocalProxy__local", local)  '),i("span",{staticStyle:{color:"rgb(65, 173, 28)"}},[t._v("# 将 local 赋值给 _LocalProxy__local 属性，该属性可以通过 self.__local 进行访问")])]),i("div",[t._v('        object.__setattr__(self, "__name__", name)  '),i("span",{staticStyle:{color:"rgb(65, 173, 28)"}},[t._v("# 将 name 赋值给 __name__ 属性")])]),i("div",[t._v('        if callable(local) and not hasattr(local, "__release_local__"):')]),i("div",[t._v('            object.__setattr__(self, "__wrapped__", local)')]),i("div",[i("br")]),i("div",[i("span",{staticStyle:{color:"rgb(65, 173, 28)"}},[t._v("# 调用偏函数获取 ctx/app_ctx 对象（即: request_context/app_context 对象）")])]),i("div",[t._v("    def _get_current_object(self):")]),i("div",[t._v('        if not hasattr(self.__local, "__release_local__"):')]),i("div",[t._v("            return self.__local()  "),i("font",{staticStyle:{color:"rgb(65, 173, 28)"}},[t._v("# 调用偏函数获取 ctx/app_ctx 对象（即: request_context/app_context 对象）")])],1),i("div",[t._v("        try:")]),i("div",[t._v("            return getattr(self.__local, self.__name__)")]),i("div",[t._v("        except AttributeError:")]),i("div",[t._v('            raise RuntimeError("no object bound to %s" % self.__name__)')]),i("div",[i("br")]),i("div",[i("span",{staticStyle:{color:"rgb(65, 173, 28)"}},[t._v("# 当 LocalProxy 所实例化的对象执行了 对象.属性名 的时候就会执行该方法")])]),i("div",[t._v("    def __getattr__(self, name):")]),i("div",[t._v('        if name == "__members__":')]),i("div",[t._v("            return dir(self._get_current_object())")]),i("div",[t._v("        return getattr(self._get_current_object(), name)  "),i("span",{staticStyle:{color:"rgb(65, 173, 28)"}},[t._v("#")]),t._v(" "),i("font",{attrs:{color:"#41AD1C"}},[t._v("调用偏函数获取 ctx/app_ctx 对象（即: request_context/app_context 对象），然后使用反射获取 ctx/app_ctx 对象下的对应 request、session、g")])],1),i("div",[i("br")]),i("div",[i("span",{staticStyle:{color:"rgb(65, 173, 28)"}},[t._v("# 当 LocalProxy 所实例化的对象执行了 对象.属性名=xxx 的时候就会执行该方法")])]),i("div",[t._v("    __setattr__ = lambda x, n, v: setattr(x._get_current_object(), n, v)")]),i("div",[i("span",{staticStyle:{color:"rgb(65, 173, 28)"}},[t._v("# 当 LocalProxy 所实例化的对象执行了 del 对象.属性名 的时候就会执行该方法")])]),i("div",[t._v("    __delattr__ = lambda x, n: delattr(x._get_current_object(), n)")]),i("div",[i("span",{staticStyle:{color:"rgb(65, 173, 28)"}},[t._v("# 当 LocalProxy 所实例化的对象执行了 print/str(对象.属性名) 的时候就会执行该方法")])]),i("div",[t._v("    __str__ = lambda x: str(x._get_current_object())")]),i("div",[i("br")]),i("div",[i("br")]),i("div",[i("font",{attrs:{color:"#41AD1C"}},[t._v("# 这里的app所指的是通过 Flask 所实例化出来的 app")])],1),i("div",[t._v("class App:")]),i("div",[t._v("    def __init__(self):")]),i("div",[t._v("        self.config = 'app的配置'")]),i("div",[i("br")]),i("div",[i("br")]),i("div",[t._v("class G:")]),i("div",[t._v("    def __init__(self):")]),i("div",[t._v("        self.name = 'Kevin'")]),i("div",[i("br")]),i("div",[i("br")]),i("div",[i("font",{attrs:{color:"#E30000"}},[t._v("# 一个拥有app和g信息的类")])],1),i("div",[t._v("class "),i("font",{attrs:{color:"#FA7A00"}},[t._v("AppContext")]),t._v("(object):")],1),i("div",[t._v("    def __init__(self):")]),i("div",[t._v("        self.app = App()  "),i("font",{attrs:{color:"#41AD1C"}},[t._v("# 注意: 这里的app所指的是通过 Flask 所实例化出来的 app 对象")])],1),i("div",[t._v("        self.g = G()")]),i("div",[i("br")]),i("div",[i("br")]),i("div",[i("font",{attrs:{color:"#FA7A00"}},[t._v("_app_ctx_stack = LocalStack()  ")]),i("font",{attrs:{color:"#41AD1C"}},[t._v("# 实例化 LocalStack 得到 _app_ctx_stack 对象")])],1),i("div",[i("font",{attrs:{color:"#FA7A00"}},[t._v("app_context = AppContext()  ")]),i("font",{attrs:{color:"#41AD1C"}},[t._v("# 实例化一个 app_context 对象，里面拥有 app 和 g 等属性")])],1),i("div",[i("font",{attrs:{color:"#FA7A00"}},[t._v("_app_ctx_stack.push(app_context)  ")]),i("font",{attrs:{color:"#41AD1C"}},[t._v("# 将 app_context 对象，添加到 __storage__ 中的 stack 列表中")])],1),i("div",[i("br")]),i("div",[i("br")]),i("div",[i("font",{attrs:{color:"#E30000"}},[t._v("# 调用 LocalStack 下的 top 方法获取 __storage__ 下的 app_context 对象，然后根据传入的属性名通过反射获取 app_context 对象下对应的属性值")])],1),i("div",[t._v("def "),i("font",{attrs:{color:"#FA7A00"}},[t._v("_lookup_app_object")]),t._v("(name):")],1),i("div",[t._v("    app_ctx = _app_ctx_stack.top  "),i("font",{staticStyle:{color:"rgb(65, 173, 28)"}},[t._v("# 调用 LocalStack 下的 top 方法获取 __storage__ 下的 app_ctx 对象（即：app_co")]),i("font",{attrs:{color:"#41AD1C"}},[i("font",[t._v("ntext 对象")]),t._v("）")],1)],1),i("div",[t._v("    return getattr(app_ctx, name) "),i("font",{attrs:{color:"#41AD1C"}},[t._v(" # 等同于 app_ctx.g")])],1),i("div",[i("br")]),i("div",[i("br")]),i("div",[i("font",{attrs:{color:"#E30000"}},[t._v("# 调用 LocalStack 下的 top 方法获取 __storage__ 下的 app_context 对象下的 app 对象")])],1),i("div",[t._v("def "),i("font",{attrs:{color:"#FA7A00"}},[t._v("_find_app")]),t._v("():")],1),i("div",[t._v("    app_ctx = _app_ctx_stack.top  "),i("font",{staticStyle:{color:"rgb(65, 173, 28)"}},[t._v("# 调用 LocalStack 下的 top 方法获取 __storage__ 下的 app_ctx 对象（即：app_context 对象）")])],1),i("div",[t._v("    return app_ctx.app")]),i("div",[i("br")]),i("div",[i("br")]),i("div",[i("font",{attrs:{color:"#E30000"}},[t._v("# 通过 LocalProxy 对 app_ctx 对象（即: app_context 对象）下的 app g 进行操作（即: 增删改查）")])],1),i("div",[i("font",{attrs:{color:"#FA7A00"}},[t._v("current_app = LocalProxy(_find_app)")])],1),i("div",[i("font",{attrs:{color:"#FA7A00"}},[t._v("g = LocalProxy(functools.partial(_lookup_app_object, 'g'))")])],1)]),i("div",[i("br")]),i("ul",{staticStyle:{"box-sizing":"border-box","-webkit-tap-highlight-color":"transparent",margin:"0px",padding:"0px 0px 0px 40px",border:"1px solid transparent","font-size":"medium","letter-spacing":"normal",orphans:"2","text-align":"start","text-indent":"0px","text-transform":"none","white-space":"normal",widows:"2","word-spacing":"0px","-webkit-text-stroke-width":"0px"}},[i("li",{staticStyle:{"box-sizing":"border-box","-webkit-tap-highlight-color":"transparent",margin:"0px",padding:"0px",border:"1px solid transparent"}},[i("div",{staticStyle:{"box-sizing":"border-box","-webkit-tap-highlight-color":"transparent",margin:"0px",padding:"0px"}},[i("span",{staticStyle:{"box-sizing":"border-box","-webkit-tap-highlight-color":"transparent","font-size":"medium",color:"rgb(0, 0, 0)","font-family":'"Courier New"',"font-variant-caps":"normal","font-variant-ligatures":"normal"}},[t._v("获取 current_app 或 g 的方式一")])])])]),i("div",{staticStyle:{"box-sizing":"border-box","-webkit-tap-highlight-color":"transparent",margin:"0px",padding:"0px","font-size":"medium","letter-spacing":"normal",orphans:"2","text-align":"start","text-indent":"0px","text-transform":"none","white-space":"normal",widows:"2","word-spacing":"0px","-webkit-text-stroke-width":"0px"}},[i("br",{staticStyle:{"box-sizing":"border-box","-webkit-tap-highlight-color":"transparent"}})]),i("ul",{staticStyle:{"box-sizing":"border-box","-webkit-tap-highlight-color":"transparent",margin:"0px",padding:"0px 0px 0px 40px",border:"1px solid transparent","font-size":"medium","letter-spacing":"normal",orphans:"2","text-align":"start","text-indent":"0px","text-transform":"none","white-space":"normal",widows:"2","word-spacing":"0px","-webkit-text-stroke-width":"0px"}},[i("ul",{staticStyle:{"box-sizing":"border-box","-webkit-tap-highlight-color":"transparent",margin:"0px",padding:"0px 0px 0px 40px",border:"0px"}},[i("li",{staticStyle:{"box-sizing":"border-box","-webkit-tap-highlight-color":"transparent",margin:"0px",padding:"0px",border:"1px solid transparent"}},[i("div",{staticStyle:{"box-sizing":"border-box","-webkit-tap-highlight-color":"transparent",margin:"0px",padding:"0px"}},[i("span",{staticStyle:{"font-size":"medium",color:"rgb(0, 0, 0)","font-family":'"Courier New"',"font-variant-caps":"normal","font-variant-ligatures":"normal"}},[t._v("在视图函数中也可以通过 flask.globals._app_ctx_stack 中的 _app_ctx_stack 进行获取")])])])])]),i("div",{staticStyle:{"box-sizing":"border-box","-webkit-tap-highlight-color":"transparent",margin:"0px",padding:"0px"}},[i("br")]),i("div",{staticStyle:{"box-sizing":"border-box",padding:"8px","font-family":'Monaco, Menlo, Consolas, "Courier New", monospace',"font-size":"12px",color:"rgb(51, 51, 51)","border-radius":"4px","background-color":"rgb(251, 250, 248)",border:"1px solid rgba(0, 0, 0, 0.15)","-en-codeblock":"true"}},[i("div",[i("font",{attrs:{color:"#41AD1C"}},[t._v("# v.py")])],1),i("div",[i("br")]),i("div",[t._v("from f import _app_ctx_stack")]),i("div",[i("br")]),i("div",[t._v("current_app = _app_ctx_stack.top.app")]),i("div",[t._v("print(current_app.config)  "),i("font",{attrs:{color:"#41AD1C"}},[t._v("# app的配置")])],1),i("div",[i("font",{attrs:{color:"#41AD1C"}},[i("br")])],1),i("div",[t._v("g = _app_ctx_stack.top.g")]),i("div",[t._v("print(g.name)  "),i("font",{attrs:{color:"#41AD1C"}},[t._v("# Kevin")])],1)]),i("div",{staticStyle:{"box-sizing":"border-box","-webkit-tap-highlight-color":"transparent",margin:"0px",padding:"0px"}},[i("br")]),i("ul",[i("li",[i("div",{staticStyle:{"box-sizing":"border-box","-webkit-tap-highlight-color":"transparent",margin:"0px",padding:"0px"}},[i("span",{staticStyle:{"box-sizing":"border-box","-webkit-tap-highlight-color":"transparent"}},[t._v("获取 current_app 或 g 的方式二")])])])]),i("div",{staticStyle:{"box-sizing":"border-box","-webkit-tap-highlight-color":"transparent",margin:"0px",padding:"0px"}},[i("br")]),i("div",{staticStyle:{"box-sizing":"border-box",padding:"8px","font-family":'Monaco, Menlo, Consolas, "Courier New", monospace',"font-size":"12px",color:"rgb(51, 51, 51)","border-radius":"4px","background-color":"rgb(251, 250, 248)",border:"1px solid rgba(0, 0, 0, 0.15)","-en-codeblock":"true"}},[i("div",[i("font",{attrs:{color:"#41AD1C"}},[t._v("# v.py")])],1),i("div",[i("br")]),i("div",[t._v("from f import current_app, g")]),i("div",[i("br")]),i("div",[t._v("print(current_app.config)  "),i("font",{attrs:{color:"#41AD1C"}},[t._v("# app的配置")])],1),i("div",[t._v("print(g.name)  "),i("font",{attrs:{color:"#41AD1C"}},[t._v("# Kevin")])],1)]),i("div",{staticStyle:{"box-sizing":"border-box","-webkit-tap-highlight-color":"transparent",margin:"0px",padding:"0px"}},[i("br")]),i("div",[i("span",{staticStyle:{"font-size":"14pt","white-space":"pre-wrap","font-weight":"bold"}},[t._v("3.")]),t._v(" "),i("span",{staticStyle:{"font-size":"14pt","font-weight":"bold"}},[t._v("Flask app上下文管理机制流程图")])])]),i("div",[i("br")]),i("ul",[i("li",[i("div",[i("span",{staticStyle:{"font-size":"12pt"}},[t._v("获取 current_app 或 g 的方式一")])])])]),i("div",[i("br")]),i("div",[i("img",{attrs:{"data-filename":"app上下文1.png",src:"/kevin-blog/Flask/上下文管理_files/app上下文1.png",type:"image/png"}})]),i("div",[i("br")]),i("ul",[i("li",[i("div",[i("span",{staticStyle:{"font-size":"12pt"}},[t._v("获取 current_app 或 g 的方式二")])])])]),i("div",[i("br")]),i("div",[i("img",{attrs:{"data-filename":"app上下文2.png",src:"/kevin-blog/Flask/上下文管理_files/app上下文2.png",type:"image/png"}})]),i("div",[i("br")])]),i("h2",{staticStyle:{margin:"10px 0px 12px",padding:"0px 0px 0px 15px","font-size":"21px","background-color":"#3eaf7c","border-radius":"3px","text-align":"center","text-shadow":"rgb(34, 34, 34) 1px 1px 2px","letter-spacing":"normal",orphans:"2","text-indent":"0px","text-transform":"none","white-space":"normal",widows:"2","word-spacing":"0px","-webkit-text-stroke-width":"0px"}},[i("span",{staticStyle:{"font-size":"21px","background-color":"#3eaf7c","border-radius":"3px","text-shadow":"rgb(34, 34, 34) 1px 1px 2px","letter-spacing":"normal",orphans:"2","text-indent":"0px","text-transform":"none","white-space":"normal",widows:"2","word-spacing":"0px","-webkit-text-stroke-width":"0px",color:"white","font-family":'"Helvetica Neue", Helvetica, Verdana, Arial, sans-serif',"font-variant-caps":"normal","font-variant-ligatures":"normal","font-weight":"bold","line-height":"1.5"}},[t._v("上下文管理机制总的流程图")])]),i("div",[i("br")]),i("ul",[i("li",[i("div",[t._v("所存储的数据结构")])])]),i("div",[i("br")]),i("div",{staticStyle:{"box-sizing":"border-box",padding:"8px","font-family":'Monaco, Menlo, Consolas, "Courier New", monospace',"font-size":"12px",color:"rgb(51, 51, 51)","border-radius":"4px","background-color":"rgb(251, 250, 248)",border:"1px solid rgba(0, 0, 0, 0.15)","-en-codeblock":"true"}},[i("div",[t._v("__storage__ = {")]),i("div",[t._v("    '线程或协程的唯一标识': {'stack': [ctx, app_ctx, xxx]},")]),i("div",[t._v("    '线程或协程的唯一标识': {'stack': [ctx, app_ctx, xxx]},")]),i("div",[t._v("    '线程或协程的唯一标识': {'stack': [ctx, app_ctx, xxx]},")]),i("div",[i("span",{staticStyle:{color:"rgb(65, 173, 28)"}},[t._v("……")])]),i("div",[t._v("}")])]),i("div",[i("br")]),i("ul",[i("li",[i("div",[t._v("请求和app上下文管理机制总的流程图")])])]),i("div",[i("br")]),i("div",[i("img",{attrs:{"data-filename":"上下文管理机制.png",src:"/kevin-blog/Flask/上下文管理_files/上下文管理机制.png",type:"image/png"}})]),i("div",[i("br")]),i("div",[i("br")])]),i("div",[i("br")])])])])}),[],!1,null,null,null);o.default=r.exports}}]);