(window.webpackJsonp=window.webpackJsonp||[]).push([[227],{580:function(t,i,o){"use strict";o.r(i);var r=o(25),e=Object(r.a)({},(function(){var t=this,i=t.$createElement,o=t._self._c||i;return o("ContentSlotsDistributor",{attrs:{"slot-key":t.$parent.slotKey}},[o("div",[o("span",[o("div",[o("div",[o("div",[o("span",{staticStyle:{"font-size":"14pt"}},[t._v("并发编程是指在一台处理器上“同时”处理多个任务。")])]),o("div",[o("br")]),o("div",[o("span",{staticStyle:{"font-size":"14pt"}},[t._v("多线程就是用来实现并发编程")])]),o("div",[o("br")]),o("div",[o("span",{staticStyle:{"font-size":"14pt"}},[t._v("多线程可以理解为多个异步的代码")])]),o("div",[o("br")]),o("div",[o("span",{staticStyle:{"font-size":"14pt"}},[o("span",{staticStyle:{"font-size":"14pt",color:"rgb(227, 0, 0)"}},[t._v("线程就是为了实现代码的异步执行")])])]),o("div",[o("span",{staticStyle:{"font-size":"14pt"}},[o("br")])]),o("div",[o("span",{staticStyle:{"font-size":"14pt",color:"rgb(227, 0, 0)"}},[t._v("如果开启了多线程，就是多个")]),o("span",{staticStyle:{"font-size":"14pt",color:"rgb(227, 0, 0)"}},[t._v("线程")]),o("span",{staticStyle:{"font-size":"14pt",color:"rgb(227, 0, 0)"}},[t._v("几乎同时开始执行")])]),o("div",[o("span",{staticStyle:{"font-size":"14pt"}},[o("br")])]),o("div",[o("span",{staticStyle:{"font-size":"14pt"}},[t._v("线程的使用场景:")])]),o("ul",[o("li",[o("div",[o("span",{staticStyle:{"font-size":"14pt"}},[t._v("如果两个任务需要内存的共享，且想实现异步，那么就使用多线程")])])]),o("li",[o("div",[o("span",{staticStyle:{"font-size":"14pt"}},[t._v("高IO类型的程序（")]),o("span",{staticStyle:{"font-size":"14pt"}},[t._v("爬虫 网页编程 socket")]),o("span",{staticStyle:{"font-size":"14pt"}},[t._v("）一般都会使用多线程")])])]),o("li",[o("div",[o("span",{staticStyle:{"font-size":"14pt",color:"rgb(227, 0, 0)"}},[t._v("在日常开发中我们会使用线程比较多，因为")]),o("span",{staticStyle:{"font-size":"14pt",color:"rgb(227, 0, 0)","font-variant-caps":"normal","font-variant-ligatures":"normal"}},[t._v("线程的运行会比进程的快，还有 CPU 在线程之间切换 比 在进程之间切换要快")]),o("span",{staticStyle:{"font-size":"14pt",color:"rgb(227, 0, 0)"}},[t._v("，且进程一般都是用在计算类型的程序")]),o("span",{staticStyle:{"font-size":"14pt",color:"rgb(227, 0, 0)"}},[t._v("（只是做算数用的程序）")]),o("span",{staticStyle:{"font-size":"14pt",color:"rgb(227, 0, 0)"}},[t._v("中")])])])]),o("div",[o("span",{staticStyle:{"font-size":"14pt"}},[o("span",{staticStyle:{"font-size":"14pt"}},[o("br")])])]),o("div",[o("span",{staticStyle:{"font-size":"14pt",color:"rgb(173, 0, 0)","font-weight":"bold"}},[t._v("开多线程，线程数超过3个以上就使用线程池来处理")])]),o("div",[o("span",{staticStyle:{"font-size":"14pt"}},[o("span",{staticStyle:{"font-size":"14pt"}},[o("br")])])]),o("div",[o("span",{staticStyle:{"font-size":"14pt"}},[o("span",{staticStyle:{"font-size":"14pt"}},[o("br")])])]),o("div",[o("span",{staticStyle:{"font-size":"14pt"}},[o("span",{staticStyle:{"font-size":"14pt",color:"rgb(227, 0, 0)","font-weight":"bold"}},[t._v("threading ")])]),o("span",{staticStyle:{"font-size":"14pt",color:"rgb(227, 0, 0)","font-weight":"bold"}},[t._v("模块 -> 综合的管理线程的包")])]),o("div",[o("br")]),o("div",[o("span",{staticStyle:{"font-size":"14pt"}},[o("span",{staticStyle:{"font-size":"14pt"}},[t._v("所有创建线程的程序都")]),o("span",{staticStyle:{"font-size":"14pt","font-weight":"bold"}},[t._v("无需")]),o("span",{staticStyle:{"font-size":"14pt"}},[t._v("放在 ")])]),o("span",{staticStyle:{"font-size":"14pt"}},[t._v("if __name__ == '__main__' 下执行了，如果为了容易分别那个是主线程或者子线程也是可以使用的")])]),o("div",[o("span",{staticStyle:{"font-size":"14pt"}},[o("br")])]),o("div",[o("span",{staticStyle:{"font-size":"14pt"}},[t._v("threading 线程模块的用法 和 ")]),o("span",{staticStyle:{"font-size":"14pt"}},[t._v("multiprocessing 进程模块差不多")])]),o("div",[o("span",{staticStyle:{"font-size":"14pt"}},[o("br")])]),o("div",[o("span",{staticStyle:{"font-size":"14pt",color:"rgb(227, 0, 0)","font-weight":"bold"}},[t._v("一个 py 文件就相当于一个进程了，所以可以直接在 py 文件下直接创建线程，这样就可以解释线程一定是存在进程中的")])]),o("div",[o("span",{staticStyle:{"font-size":"14pt"}},[o("br")])]),o("div",[o("span",{staticStyle:{"font-size":"14pt",color:"rgb(173, 0, 0)","font-variant-caps":"normal","font-variant-ligatures":"normal","font-weight":"bold"}},[t._v("多个线程")]),o("span",{staticStyle:{"font-size":"14pt",color:"rgb(173, 0, 0)","font-variant-caps":"normal","font-variant-ligatures":"normal","font-weight":"bold"}},[t._v("使用同一个进程的数据（")]),o("span",{staticStyle:{"font-size":"14pt",color:"rgb(173, 0, 0)","font-weight":"bold"}},[t._v("一个进程中的多个线程是可以直接使用这个进程中的数据 -> 类似于多个进程可以调用同一个数据一样）")])]),o("div",[o("span",{staticStyle:{"font-size":"14pt"}},[o("br")])]),o("div",[o("span",{staticStyle:{"font-size":"14pt","white-space":"pre-wrap","font-family":'"Courier New"',"font-weight":"bold","line-height":"1.75"}},[t._v("1.")]),t._v(" "),o("span",{staticStyle:{"font-size":"14pt"}},[o("span",{staticStyle:{"font-size":"14pt","font-weight":"bold"}},[t._v("Thread ")])]),o("span",{staticStyle:{"font-size":"14pt","font-weight":"bold"}},[t._v("类 -> 用于创建线程")])]),o("div",[o("span",{staticStyle:{"font-size":"14pt"}},[o("br")])]),o("ul",[o("li",[o("div",[t._v("Thread"),o("span",{staticStyle:{"font-size":"12pt"}},[t._v("(target=函数名, args=函数接收的参数) -> ")]),o("span",{staticStyle:{"font-size":"12pt"}},[t._v("args 必须接收一个元组")])])])]),o("div",[o("span",{staticStyle:{"font-size":"14pt"}},[o("br")])]),o("div",{staticStyle:{"box-sizing":"border-box",padding:"8px","font-family":'Monaco, Menlo, Consolas, "Courier New", monospace',"font-size":"12px",color:"rgb(51, 51, 51)","border-radius":"4px","background-color":"rgb(251, 250, 248)",border:"1px solid rgba(0, 0, 0, 0.15)","-en-codeblock":"true"}},[o("div",[t._v("import time")]),o("div",[t._v("from threading import Thread")]),o("div",[o("br")]),o("div",[o("br")]),o("div",[o("font",{attrs:{color:"#41AD1C"}},[t._v("# 子线程")])],1),o("div",[t._v("def fun():")]),o("div",[t._v("    time.sleep(1)")]),o("div",[t._v("    print('hello')")]),o("div",[o("br")]),o("div",[o("br")]),o("div",[o("font",{attrs:{color:"#41AD1C"}},[t._v("# 主线程")])],1),o("div",[t._v("t = Thread(target=fun)  "),o("font",{attrs:{color:"#E30000"}},[t._v("# 创建一个线程执行一个函数")])],1),o("div",[o("font",{attrs:{color:"#E30000"}},[o("br")])],1),o("div",[t._v("t.start()  "),o("font",{attrs:{color:"#E30000"}},[t._v("# 开启线程")])],1),o("div",[o("font",{attrs:{color:"#E30000"}},[o("br")])],1),o("div",[t._v("print('---- 主线程 ----') "),o("b",[o("font",{attrs:{color:"#E30000"}},[t._v("# 当线程启动后 t.start() 下方的代码不会等待线程所绑定的函数执行完再开始执行，而是直接往下执行，因为此时线程所绑定的函数已经变成了异步代码了")])],1)]),o("div",[o("b",[o("font",{attrs:{color:"#E30000"}},[o("br")])],1)]),o("div",[o("font",{attrs:{color:"#41AD1C"}},[t._v("# 执行结果:")])],1),o("div",[o("font",{attrs:{color:"#41AD1C"}},[t._v("    # -------主线程-------")])],1),o("div",[o("font",{attrs:{color:"#41AD1C"}},[t._v("    # hello")])],1)]),o("div",[o("br")]),o("div",[o("img",{attrs:{"data-filename":"TIM截图2019030416550.png",src:"/kevin-blog/Python/threading 线程模块_files/TIM截图2019030416550.png",type:"image/png"}})]),o("div",[o("br")]),o("ul",[o("li",[o("div",[t._v(".join() -> 主线程的代码会在 .json() 这里进行阻塞，等待子线程（线程所绑定的函数）执行完后，才会往下执行 -> "),o("span",{staticStyle:{color:"rgb(227, 0, 0)","font-weight":"bold"}},[t._v("当使用了.join()，程序就会变成同步执行了")])])])]),o("div",[o("br")]),o("div",{staticStyle:{"box-sizing":"border-box",padding:"8px","font-family":'Monaco, Menlo, Consolas, "Courier New", monospace',"font-size":"12px",color:"rgb(51, 51, 51)","border-radius":"4px","background-color":"rgb(251, 250, 248)",border:"1px solid rgba(0, 0, 0, 0.15)","-en-codeblock":"true"}},[o("div",[o("font",{attrs:{color:"#000000"}},[t._v("import time")])],1),o("div",[o("font",{attrs:{color:"#000000"}},[t._v("from threading import Thread")])],1),o("div",[o("font",{attrs:{color:"#000000"}},[o("br")])],1),o("div",[o("font",{attrs:{color:"#000000"}},[o("br")])],1),o("div",[o("font",{attrs:{color:"#41AD1C"}},[t._v("# 子线程")])],1),o("div",[o("font",{attrs:{color:"#000000"}},[t._v("def fun():")])],1),o("div",[o("font",{attrs:{color:"#000000"}},[t._v("    time.sleep(1)")])],1),o("div",[o("font",{attrs:{color:"#000000"}},[t._v("    print('hello')")])],1),o("div",[o("font",{attrs:{color:"#000000"}},[o("br")])],1),o("div",[o("font",{attrs:{color:"#000000"}},[o("br")])],1),o("div",[o("font",{attrs:{color:"#41AD1C"}},[t._v("# 主线程")])],1),o("div",[o("font",{attrs:{color:"#000000"}},[t._v("t = Thread(target=fun)")])],1),o("div",[o("font",{attrs:{color:"#000000"}},[o("br")])],1),o("div",[o("font",{attrs:{color:"#000000"}},[t._v("t.start()")])],1),o("div",[o("font",{attrs:{color:"#000000"}},[o("br")])],1),o("div",[o("font",{attrs:{color:"#000000"}},[t._v("t.join()  ")]),o("font",{attrs:{color:"#E30000"}},[t._v("# 阻塞 -> 等待子线程（线程所绑定的函数）执行完后，才会往下执行")])],1),o("div",[o("font",{attrs:{color:"#000000"}},[o("br")])],1),o("div",[o("font",{attrs:{color:"#000000"}},[t._v("print('---- 主线程 ----')")])],1),o("div",[o("font",{attrs:{color:"#000000"}},[o("br")])],1),o("div",[o("font",{attrs:{color:"#41AD1C"}},[t._v("# 执行结果:")])],1),o("div",[o("font",{attrs:{color:"#41AD1C"}},[t._v("    # hello")])],1),o("div",[o("font",{attrs:{color:"#41AD1C"}},[t._v("    # -------主线程-------")])],1)]),o("div",[o("br")]),o("ul",[o("li",[o("div",[t._v("开启多个子线程")])])]),o("div",[o("br")]),o("div",{staticStyle:{"box-sizing":"border-box",padding:"8px","font-family":'Monaco, Menlo, Consolas, "Courier New", monospace',"font-size":"12px",color:"rgb(51, 51, 51)","border-radius":"4px","background-color":"rgb(251, 250, 248)",border:"1px solid rgba(0, 0, 0, 0.15)","-en-codeblock":"true"}},[o("div",[t._v("# 同时开启20个线程执行 fun 函数")]),o("div",[o("br")]),o("div",[t._v("import time")]),o("div",[t._v("import os")]),o("div",[t._v("from threading import Thread")]),o("div",[o("br")]),o("div",[o("br")]),o("div",[o("font",{attrs:{color:"#41AD1C"}},[t._v("# 子线程")])],1),o("div",[t._v("def fun(i):")]),o("div",[t._v("    time.sleep(1)")]),o("div",[t._v("    print('%s.线程' % i, os.getpid())")]),o("div",[o("br")]),o("div",[o("br")]),o("div",[o("font",{attrs:{color:"#41AD1C"}},[t._v("# 主线程")])],1),o("div",[t._v("t_l = []")]),o("div",[t._v("for i in range(20):")]),o("div",[t._v("    t = Thread(target=fun, args=(i,))  "),o("font",{attrs:{color:"#E30000"}},[t._v("# 同时开启20个线程执行 fun 函数")])],1),o("div",[t._v("    t.start()  "),o("font",{attrs:{color:"#E30000"}},[t._v("# 开启线程")])],1),o("div",[t._v("    t_l.append(t)")]),o("div",[o("br")]),o("div",[t._v("[i.join() for i in t_l]  "),o("font",{attrs:{color:"#E30000"}},[t._v("# 等待所有线程结束后再执行下方代码")])],1),o("div",[t._v("print('-----主线程-----', os.getpid())")])]),o("div",[o("br")]),o("div",[o("span",{staticStyle:{"font-size":"14pt","white-space":"pre-wrap",color:"rgb(227, 0, 0)","font-family":'"Courier New"',"font-weight":"bold","line-height":"1.75"}},[t._v("2.")]),o("span",{staticStyle:{color:"rgb(227, 0, 0)"}}),o("span",{staticStyle:{"font-size":"14pt",color:"rgb(227, 0, 0)","font-weight":"bold"}},[t._v("线程函数调用外部的变量和函数的注意事项")])]),o("div",[o("span",{staticStyle:{"font-size":"14pt"}},[o("br")])]),o("ul",[o("li",[o("div",[o("span",{staticStyle:{"font-size":"12pt"}},[t._v("从线程的角度说明: 因为一个进程中的多个线程是可以直接使用这个进程中的数据，且一个py文件就相当于一个进程")])])]),o("li",[o("div",[o("span",{staticStyle:{"font-size":"12pt"}},[t._v("不按照线程的说法: 函数本来就可以调用外部的变量和方法，因为作用域链")])])]),o("li",[o("div",[o("span",{staticStyle:{"font-size":"12pt"}},[t._v("如果要调用的变量和函数在 ")]),t._v("if __name__ == '__main__': 里面必须用传参的形式调用不然就会报错，因为线程函数无法直接调用 if __name__ == '__main__': 里面的方法和函数，如果是直接执行该函数是可以的，但是如果是被线程执行就不行")])])]),o("div",[o("span",{staticStyle:{"font-size":"14pt"}},[o("br")])]),o("div",{staticStyle:{"box-sizing":"border-box",padding:"8px","font-family":'Monaco, Menlo, Consolas, "Courier New", monospace',"font-size":"12px",color:"rgb(51, 51, 51)","border-radius":"4px","background-color":"rgb(251, 250, 248)",border:"1px solid rgba(0, 0, 0, 0.15)","-en-codeblock":"true"}},[o("div",[t._v("from threading import Thread")]),o("div",[o("br")]),o("div",[o("br")]),o("div",[t._v("def fun(if_data):")]),o("div",[t._v("    print(data)  "),o("font",{attrs:{color:"#E30000"}},[t._v("# 获取进程中的数据 -> 直接调用线程函数外部的并且不在 if __name__ == '__main__': 里面的变量，函数是可以直接调用函数外部的变量或方法（因为作用域链）")])],1),o("div",[t._v("    print(if_data) "),o("font",{attrs:{color:"#E30000"}},[t._v("# 获取进程中的数据 -> 使用传参的形式调用 if __name__ == '__main__': 里面的变量")])],1),o("div",[t._v("    f() "),o("font",{attrs:{color:"#E30000"}},[t._v(" # 直接调用线程函数外部的并且不在 if __name__ == '__main__': 里面的方法，函数是可以直接调用函数外部的变量或方法（因为作用域链）")])],1),o("div",[t._v("    print('子线程')")]),o("div",[o("br")]),o("div",[o("br")]),o("div",[t._v("data = '这是进程中的数据'")]),o("div",[o("br")]),o("div",[o("br")]),o("div",[t._v("def f():")]),o("div",[t._v("    print('这是进程中的函数')")]),o("div",[o("br")]),o("div",[o("br")]),o("div",[t._v("if __name__ == '__main__':  "),o("font",{attrs:{color:"#E30000"}},[o("b",[t._v("# 线程的定义可以不用放在 if __name__ == '__main__': 里面执行，但是如果放在了 if main 里面那么就要注意线程函数调用外部变量和函数的注意事项了")])])],1),o("div",[t._v("    if_data = 'if_main里面的参数'")]),o("div",[t._v("    t = Thread(target=fun, args=(if_data,))")]),o("div",[t._v("    t.start()")]),o("div",[t._v("    t.join()")]),o("div",[t._v("    print('----主线程----')")])]),o("div",[o("br")]),o("div",[o("span",{staticStyle:{"font-size":"14pt","white-space":"pre-wrap","font-family":'"Courier New"',"font-weight":"bold","line-height":"1.75"}},[t._v("3.")]),t._v(" "),o("span",{staticStyle:{"font-size":"14pt","font-weight":"bold"}},[t._v("创建线程的方法二 -> 通过继承方式")])]),o("div",[o("span",{staticStyle:{"font-size":"14pt"}},[o("br")])]),o("div",{staticStyle:{"box-sizing":"border-box",padding:"8px","font-family":'Monaco, Menlo, Consolas, "Courier New", monospace',"font-size":"12px",color:"rgb(51, 51, 51)","border-radius":"4px","background-color":"rgb(251, 250, 248)",border:"1px solid rgba(0, 0, 0, 0.15)","-en-codeblock":"true"}},[o("div",[t._v("import time")]),o("div",[t._v("import os")]),o("div",[t._v("from threading import Thread")]),o("div",[o("br")]),o("div",[o("br")]),o("div",[t._v("class MyThread(Thread):  "),o("font",{staticStyle:{color:"rgb(227, 0, 0)"}},[t._v("# 通过继承 Thread 类，从而创建一个线程")])],1),o("div",[t._v("    def __init__(self, d1, d2):")]),o("div",[t._v("        super().__init__()")]),o("div",[t._v("        self.d1 = d1")]),o("div",[t._v("        self.d2 = d2")]),o("div",[o("br")]),o("div",[t._v("    def run(self):  "),o("font",{staticStyle:{color:"rgb(227, 0, 0)"}},[t._v("# run 方法就相当于线程所绑定的函数")])],1),o("div",[t._v("        t_name = self.name  "),o("font",{staticStyle:{color:"rgb(227, 0, 0)"}},[t._v("# 获取线程的名字")])],1),o("div",[t._v("        t_id = self.ident "),o("font",{attrs:{color:"#E30000"}},[t._v(" # 获取线程的id")])],1),o("div",[t._v("        print(self.d1, self.d2, t_name, t_id)")]),o("div",[o("br")]),o("div",[o("br")]),o("div",[t._v("t = MyThread('数据一', '数据二')  "),o("font",{staticStyle:{color:"rgb(227, 0, 0)"}},[t._v("# 创建一个线程")])],1),o("div",[t._v("t.start()  "),o("font",{attrs:{color:"#E30000"}},[t._v("# 当线程启动的时候就会调用类中的 run 方法")])],1),o("div",[t._v("t.join()")]),o("div",[t._v("print('----主线程----')")])]),o("div",[o("span",{staticStyle:{"font-size":"14pt"}},[o("br")])]),o("div",{staticStyle:{"box-sizing":"border-box",padding:"8px","font-family":'Monaco, Menlo, Consolas, "Courier New", monospace',"font-size":"12px",color:"rgb(51, 51, 51)","border-radius":"4px","background-color":"rgb(251, 250, 248)",border:"1px solid rgba(0, 0, 0, 0.15)","-en-codeblock":"true"}},[o("div",[t._v("# 例子计算开启了多少个线程数量")]),o("div",[t._v("# 使用静态属性计算线程被调用了多少次，从而实现多个线程共享（使用）一个数据")]),o("div",[o("br")]),o("div",[t._v("import time")]),o("div",[t._v("import os")]),o("div",[t._v("from threading import Thread")]),o("div",[o("br")]),o("div",[o("br")]),o("div",[t._v("class MyThread(Thread):  "),o("font",{attrs:{color:"#41AD1C"}},[t._v("# 通过继承 Thread 类，从而创建一个线程")])],1),o("div",[t._v("    count = 0  "),o("font",{staticStyle:{color:"rgb(227, 0, 0)"}},[t._v("# 通过静态属性计算线程被调用了多少次")])],1),o("div",[o("br")]),o("div",[t._v("    def __init__(self, d1, d2):")]),o("div",[t._v("        super().__init__()")]),o("div",[t._v("        self.d1 = d1")]),o("div",[t._v("        self.d2 = d2")]),o("div",[o("br")]),o("div",[t._v("    def run(self):  "),o("font",{attrs:{color:"#41AD1C"}},[t._v("# run 方法就相当于线程所绑定的函数")])],1),o("div",[t._v("        MyThread.count += 1")]),o("div",[t._v("        time.sleep(1)")]),o("div",[t._v("        print(self.d1, self.d2)")]),o("div",[o("br")]),o("div",[o("br")]),o("div",[t._v("t_l = []")]),o("div",[t._v("for i in range(10):")]),o("div",[t._v("    t = MyThread('数据一', '数据二')  "),o("font",{attrs:{color:"#41AD1C"}},[t._v("# 创建一个线程")])],1),o("div",[t._v("    t.start()   "),o("font",{attrs:{color:"#41AD1C"}},[t._v("# 当线程启动的时候就会调用类中的 run 方法")])],1),o("div",[t._v("    t_l.append(t)")]),o("div",[o("br")]),o("div",[t._v("[i.join() for i in t_l] "),o("font",{attrs:{color:"#E30000"}},[t._v(" # 等待所有的线程结束后再往下执行")])],1),o("div",[t._v("print('线程被调用了：%s 次' % t.count)")])]),o("div",[o("br")]),o("div",[o("span",{staticStyle:{"box-sizing":"border-box","letter-spacing":"normal",orphans:"2","text-indent":"0px","text-transform":"none",widows:"2","word-spacing":"0px","-webkit-text-stroke-width":"0px","font-size":"14pt","white-space":"pre-wrap",color:"rgb(0, 0, 0)","font-family":'"Courier New"',"font-variant-caps":"normal","font-variant-ligatures":"normal","font-weight":"bold","line-height":"1.75"}},[t._v("4.")]),o("span",{staticStyle:{"font-size":"medium","letter-spacing":"normal",orphans:"2","text-indent":"0px","text-transform":"none","white-space":"normal",widows:"2","word-spacing":"0px","-webkit-text-stroke-width":"0px",color:"rgb(0, 0, 0)","font-family":'"Courier New"',"font-variant-caps":"normal","font-variant-ligatures":"normal"}}),o("span",{staticStyle:{"font-size":"14pt"}},[o("span",{staticStyle:{"font-size":"14pt","font-weight":"bold"}},[t._v("threading.currentThread() -> 获取当前线程的一些信息")])])]),o("div",[o("span",{staticStyle:{"font-size":"14pt"}},[o("br")])]),o("div",{staticStyle:{"box-sizing":"border-box",padding:"8px","font-family":'Monaco, Menlo, Consolas, "Courier New", monospace',"font-size":"12px",color:"rgb(51, 51, 51)","border-radius":"4px","background-color":"rgb(251, 250, 248)",border:"1px solid rgba(0, 0, 0, 0.15)","-en-codeblock":"true"}},[o("div",[o("font",{staticStyle:{"font-size":"9pt"}},[t._v("import threading")])],1),o("div",[o("font",{staticStyle:{"font-size":"9pt"}},[t._v("import time")])],1),o("div",[o("font",{staticStyle:{"font-size":"9pt"}},[o("br")])],1),o("div",[o("font",{staticStyle:{"font-size":"9pt"}},[o("br")])],1),o("div",[o("font",{staticStyle:{"font-size":"9pt"}},[t._v("def fun(i):")])],1),o("div",[o("font",{staticStyle:{"font-size":"9pt"}},[t._v("    time.sleep(0.5)")])],1),o("div",[o("font",{staticStyle:{"font-size":"9pt"}},[t._v("    t_name = threading.currentThread().name  "),o("font",{attrs:{color:"#E30000"}},[t._v("# 线程的名字")])],1)],1),o("div",[o("font",{staticStyle:{"font-size":"9pt"}},[t._v("    t_id = threading.currentThread().ident "),o("font",{attrs:{color:"#E30000"}},[t._v(" # 线程的id")])],1)],1),o("div",[o("font",{staticStyle:{"font-size":"9pt"}},[t._v("    print('线程名字：%s' % t_name)")])],1),o("div",[o("font",{staticStyle:{"font-size":"9pt"}},[t._v("    print('线程id：%s' % t_id)")])],1),o("div",[o("font",{staticStyle:{"font-size":"9pt"}},[o("br")])],1),o("div",[o("font",{staticStyle:{"font-size":"9pt"}},[o("br")])],1),o("div",[o("font",{staticStyle:{"font-size":"9pt"}},[t._v("for i in range(10):")])],1),o("div",[o("font",{staticStyle:{"font-size":"9pt"}},[t._v("    t = threading.Thread(target=fun, args=(i,))")])],1),o("div",[o("font",{staticStyle:{"font-size":"9pt"}},[t._v("    t.start()")])],1),o("div",[o("font",{staticStyle:{"font-size":"9pt"}},[o("br")])],1),o("div",[t._v("print(threading.enumerate())  "),o("font",{attrs:{color:"#E30000"}},[t._v("# 返回正在运行的线程列表")])],1),o("div",[t._v("print(threading.activeCount()) "),o("font",{attrs:{color:"#E30000"}},[t._v(" # 返回正在运行的线程总数 -> 线程数永远都是你开的线程数 + 1，因为主线程也算一个线程")])],1)]),o("div",[o("span",{staticStyle:{"font-size":"14pt"}},[o("br")])])]),o("div",[o("span",{staticStyle:{"box-sizing":"border-box","letter-spacing":"normal",orphans:"2","text-indent":"0px","text-transform":"none",widows:"2","word-spacing":"0px","-webkit-text-stroke-width":"0px","font-size":"14pt","white-space":"pre-wrap",color:"rgb(0, 0, 0)","font-family":'"Courier New"',"font-variant-caps":"normal","font-variant-ligatures":"normal","font-weight":"bold","line-height":"1.75"}},[t._v("5.")]),o("span",{staticStyle:{"box-sizing":"border-box","font-size":"medium","letter-spacing":"normal",orphans:"2","text-indent":"0px","text-transform":"none","white-space":"normal",widows:"2","word-spacing":"0px","-webkit-text-stroke-width":"0px",color:"rgb(0, 0, 0)","font-family":'"Courier New"',"font-variant-caps":"normal","font-variant-ligatures":"normal"}}),o("span",{staticStyle:{"box-sizing":"border-box","letter-spacing":"normal",orphans:"2","text-indent":"0px","text-transform":"none","white-space":"normal",widows:"2","word-spacing":"0px","-webkit-text-stroke-width":"0px","font-size":"14pt",color:"rgb(0, 0, 0)","font-family":'"Courier New"',"font-variant-caps":"normal","font-variant-ligatures":"normal","font-weight":"bold"}},[t._v("守护线程")])]),o("div",[o("span",{staticStyle:{"box-sizing":"border-box","letter-spacing":"normal",orphans:"2","text-indent":"0px","text-transform":"none","white-space":"normal",widows:"2","word-spacing":"0px","-webkit-text-stroke-width":"0px","font-size":"14pt"}},[o("br")])]),o("ul",[o("li",[o("div",[o("span",{staticStyle:{"font-size":"12pt"}},[t._v("守护线程会随着主线程的代码执行结束而结束，不会等待其他子线程")])])])]),o("div",[o("br")]),o("ul",[o("li",[o("div",[o("span",{staticStyle:{color:"rgb(227, 0, 0)","font-weight":"bold"}},[t._v(".setDaemon(True) 开启守护线程，且一定要设置在 start 之前")])])])]),o("div",[o("br")]),o("div",[o("img",{attrs:{"data-filename":"TIM截图20190302092409.png",src:"/kevin-blog/Python/threading 线程模块_files/TIM截图20190302092409.png",type:"image/png"}})]),o("div",[o("br")]),o("div",{staticStyle:{"box-sizing":"border-box",padding:"8px","font-family":'Monaco, Menlo, Consolas, "Courier New", monospace',"font-size":"12px",color:"rgb(51, 51, 51)","border-radius":"4px","background-color":"rgb(251, 250, 248)",border:"1px solid rgba(0, 0, 0, 0.15)","-en-codeblock":"true"}},[o("div",[t._v("# 报时器例子： 每个1秒就会报一次时")]),o("div",[t._v("# 开启了守护线程 -> cal_time 会随着主线程的代码执行结束而结束")]),o("div",[o("br")]),o("div",[t._v("import time")]),o("div",[t._v("from threading import Thread")]),o("div",[o("br")]),o("div",[t._v("def cal_time():")]),o("div",[t._v("    while True:")]),o("div",[t._v("        time.sleep(1)")]),o("div",[t._v("        print('过去了1秒')")]),o("div",[o("br")]),o("div",[t._v("t = Thread(target=cal_time)")]),o("div",[t._v("t.setDaemon(True)  "),o("font",{staticStyle:{color:"rgb(227, 0, 0)"}},[t._v("# 开启守护线程，一定要设置在 start 之前")])],1),o("div",[t._v("t.start()")]),o("div",[t._v("for i in range(100):")]),o("div",[t._v("    time.sleep(0.1)")]),o("div",[t._v("    print('*' * i)")])]),o("div",[o("span",{staticStyle:{"box-sizing":"border-box","letter-spacing":"normal",orphans:"2","text-indent":"0px","text-transform":"none","white-space":"normal",widows:"2","word-spacing":"0px","-webkit-text-stroke-width":"0px","font-size":"14pt"}},[o("br")])]),o("div",{staticStyle:{"box-sizing":"border-box",padding:"8px","font-family":'Monaco, Menlo, Consolas, "Courier New", monospace',"font-size":"12px",color:"rgb(51, 51, 51)","border-radius":"4px","background-color":"rgb(251, 250, 248)",border:"1px solid rgba(0, 0, 0, 0.15)","-en-codeblock":"true"}},[o("div",[t._v("# 报时器例子： 每个1秒就会报一次时")]),o("div",[t._v("# 没有开启守护线程 -> cal_time子线程会一直执行")]),o("div",[o("br")]),o("div",[t._v("import time")]),o("div",[t._v("from threading import Thread")]),o("div",[o("br")]),o("div",[t._v("def cal_time():")]),o("div",[t._v("    while True:")]),o("div",[t._v("        time.sleep(1)")]),o("div",[t._v("        print('过去了1秒')")]),o("div",[o("br")]),o("div",[t._v("t = Thread(target=cal_time)")]),o("div",[t._v("t.start()")]),o("div",[t._v("for i in range(100):")]),o("div",[t._v("    time.sleep(0.1)")]),o("div",[t._v("    print('*' * i)")])]),o("div",[o("span",{staticStyle:{"box-sizing":"border-box","letter-spacing":"normal",orphans:"2","text-indent":"0px","text-transform":"none","white-space":"normal",widows:"2","word-spacing":"0px","-webkit-text-stroke-width":"0px","font-size":"14pt"}},[o("br")])]),o("div",{staticStyle:{"box-sizing":"border-box",padding:"8px","font-family":'Monaco, Menlo, Consolas, "Courier New", monospace',"font-size":"12px",color:"rgb(51, 51, 51)","border-radius":"4px","background-color":"rgb(251, 250, 248)",border:"1px solid rgba(0, 0, 0, 0.15)","-en-codeblock":"true"}},[o("div",[t._v("# 上面图片的代码")]),o("div",[o("br")]),o("div",[t._v("import time")]),o("div",[t._v("from threading import Thread")]),o("div",[o("br")]),o("div",[o("br")]),o("div",[o("font",{attrs:{color:"#41AD1C"}},[t._v("# 守护线程")])],1),o("div",[t._v("def cal_time():")]),o("div",[t._v("    while True:")]),o("div",[t._v("        time.sleep(1)")]),o("div",[t._v("        print('过去了1秒')")]),o("div",[o("br")]),o("div",[o("br")]),o("div",[o("font",{attrs:{color:"#41AD1C"}},[t._v("# 其他子线程")])],1),o("div",[t._v("def fun():")]),o("div",[t._v("    print('--' * 10)")]),o("div",[t._v("    time.sleep(15)")]),o("div",[t._v("    print('--' * 10)")]),o("div",[o("br")]),o("div",[o("br")]),o("div",[o("font",{attrs:{color:"#41AD1C"}},[t._v("# 守护线程")])],1),o("div",[t._v("t = Thread(target=cal_time)")]),o("div",[t._v("t.setDaemon(True)  "),o("font",{attrs:{color:"#E30000"}},[t._v("# 开启守护线程")])],1),o("div",[t._v("t.start()")]),o("div",[o("br")]),o("div",[o("font",{attrs:{color:"#41AD1C"}},[t._v("# 其他子线程")])],1),o("div",[t._v("t2 = Thread(target=fun)")]),o("div",[t._v("t2.start()")]),o("div",[o("br")]),o("div",[o("font",{attrs:{color:"#41AD1C"}},[t._v("# 主线程代码")])],1),o("div",[t._v("for i in range(100):")]),o("div",[t._v("    time.sleep(0.1)")]),o("div",[t._v("    print('*' * i)")]),o("div",[t._v("t2.join()  "),o("font",{attrs:{color:"#41AD1C"}},[t._v("# 如果守护线程想等待其他线程结束后再结束，可以使用join")])],1)]),o("div",[o("span",{staticStyle:{"box-sizing":"border-box","letter-spacing":"normal",orphans:"2","text-indent":"0px","text-transform":"none","white-space":"normal",widows:"2","word-spacing":"0px","-webkit-text-stroke-width":"0px","font-size":"14pt"}},[o("br")])]),o("div",[o("span",{staticStyle:{"font-size":"14pt","white-space":"pre-wrap","font-family":'"Courier New"',"font-weight":"bold","line-height":"1.75"}},[t._v("6.")]),t._v(" "),o("span",{staticStyle:{"font-size":"14pt","font-weight":"bold"}},[t._v("多线程的应用")])]),o("div",[o("br")]),o("ul",[o("li",[o("div",[o("span",{staticStyle:{"font-size":"12pt"}},[t._v("创建多个线程实现TCP协议多人聊天 -> 因为每个")]),o("span",{staticStyle:{"font-size":"12pt"}},[t._v("线")]),o("span",{staticStyle:{"font-size":"12pt"}},[t._v("程之间是独立的所以可以实现TCP协议的多人通讯")])])])]),o("div",[o("span",{staticStyle:{"font-size":"12pt"}},[o("br")])]),o("div",{staticStyle:{"box-sizing":"border-box",padding:"8px","font-family":'Monaco, Menlo, Consolas, "Courier New", monospace',"font-size":"12px",color:"rgb(51, 51, 51)","border-radius":"4px","background-color":"rgb(251, 250, 248)",border:"1px solid rgba(0, 0, 0, 0.15)","-en-codeblock":"true"}},[o("div",[t._v("# server.py")]),o("div",[o("br")]),o("div",[t._v("import socket")]),o("div",[t._v("from threading import Thread")]),o("div",[o("br")]),o("div",[o("br")]),o("div",[t._v("def fun(conn):")]),o("div",[t._v("    conn.send(b'hello')")]),o("div",[t._v("    print(conn.recv(1024).decode('utf-8'))")]),o("div",[o("br")]),o("div",[o("br")]),o("div",[t._v("sk = socket.socket()")]),o("div",[t._v("sk.bind(('127.0.0.1', 8080))")]),o("div",[t._v("sk.listen()")]),o("div",[t._v("while True:")]),o("div",[t._v("    conn, addr = sk.accept()")]),o("div",[t._v("    t = Thread(target=fun, args=(conn,))")]),o("div",[t._v("    t.start()")]),o("div",[o("br")]),o("div",[t._v("conn.close()")]),o("div",[t._v("sk.close()")])])]),o("div",[o("br")]),o("div",{staticStyle:{"box-sizing":"border-box",padding:"8px","font-family":'Monaco, Menlo, Consolas, "Courier New", monospace',"font-size":"12px",color:"rgb(51, 51, 51)","border-radius":"4px","background-color":"rgb(251, 250, 248)",border:"1px solid rgba(0, 0, 0, 0.15)","-en-codeblock":"true"}},[o("div",[t._v("# client.py")]),o("div",[o("br")]),o("div",[t._v("import socket")]),o("div",[o("br")]),o("div",[t._v("sk = socket.socket()")]),o("div",[t._v("sk.connect(('127.0.0.1', 8080))")]),o("div",[o("br")]),o("div",[t._v("print(sk.recv(1024).decode('utf-8'))")]),o("div",[t._v("msg = input('>>>')")]),o("div",[t._v("sk.send(bytes(msg, encoding='utf-8'))")]),o("div",[o("br")]),o("div",[t._v("sk.close()")])]),o("div",[o("br")])])])])}),[],!1,null,null,null);i.default=e.exports}}]);