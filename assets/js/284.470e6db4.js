(window.webpackJsonp=window.webpackJsonp||[]).push([[284],{641:function(t,o,i){"use strict";i.r(o);var e=i(25),r=Object(e.a)({},(function(){var t=this,o=t.$createElement,i=t._self._c||o;return i("ContentSlotsDistributor",{attrs:{"slot-key":t.$parent.slotKey}},[i("div",[i("span",[i("div",[i("div",[i("div",[i("span",{staticStyle:{"font-size":"14pt",color:"rgb(227, 0, 0)","font-weight":"bold"}},[t._v("线程池的作用: 比如有100任务需要执行，那么我们不可能开100个线程来执行任务，这样会导致程序执行的很慢，但是我们可以造一个池子里面放着4个线程，每个线程执行一个任务，当其中一个线程执行完了任务，下一个任务就会进入该线程开始执行，以此类推。这样程序就会执行的很快")])]),i("div",[i("span",{staticStyle:{"font-size":"14pt"}},[i("br")])]),i("div",[i("span",{staticStyle:{"font-size":"14pt",color:"rgb(173, 0, 0)","font-weight":"bold"}},[t._v("开多线程，线程数超过3个以上就使用线程池来处理")])]),i("div",[i("span",{staticStyle:{"font-size":"14pt"}},[i("br")])]),i("div",[i("span",{staticStyle:{"font-size":"14pt"}},[t._v("前几年是没有线程池，后面才推出了 ")]),i("span",{staticStyle:{"font-size":"14pt"}},[t._v("concurrent 模块")])]),i("div",[i("span",{staticStyle:{"font-size":"14pt"}},[i("br")])]),i("div",[i("span",{staticStyle:{"font-size":"14pt"}},[i("span",{staticStyle:{"font-size":"14pt",color:"rgb(227, 0, 0)"}},[t._v("concurrent 模块中的 futures 提供了两个方法:")])])]),i("ul",[i("li",[i("div",[i("span",{staticStyle:{"font-size":"14pt",color:"rgb(227, 0, 0)"}},[t._v("futures.ThreadPoolExecutor(num) -> 创建线程池")])])]),i("li",[i("div",[i("span",{staticStyle:{"font-size":"14pt",color:"rgb(227, 0, 0)"}},[t._v("futures.ProcessPoolExecutor(num) -> 创建进程池")])])])]),i("div",[i("span",{staticStyle:{"font-size":"14pt"}},[i("br")])]),i("div",[i("span",{staticStyle:{"font-size":"18.6667px",color:"rgb(227, 0, 0)","font-weight":"bold"}},[t._v("通过 ")]),i("span",{staticStyle:{"font-size":"14pt",color:"rgb(227, 0, 0)","font-weight":"bold"}},[t._v("concurrent 模块中的 futures 创建的线程池和进程池的用法都是一样的，所提供的方法都是一样，在这里就不写进程池的用法了")])]),i("div",[i("span",{staticStyle:{"font-size":"14pt"}},[i("br")])]),i("div",[i("span",{staticStyle:{"white-space":"pre-wrap","overflow-wrap":"break-word","letter-spacing":"normal",orphans:"2","text-indent":"0px","text-transform":"none",widows:"2","word-spacing":"0px","-webkit-text-stroke-width":"0px","font-size":"14pt","font-family":'"Courier New"',"font-variant-caps":"normal","font-variant-ligatures":"normal"}},[t._v("调用线程")]),i("span",{staticStyle:{"white-space":"pre-wrap","overflow-wrap":"break-word","letter-spacing":"normal",orphans:"2","text-indent":"0px","text-transform":"none",widows:"2","word-spacing":"0px","-webkit-text-stroke-width":"0px","font-size":"14pt","font-family":'"Courier New"',"font-variant-caps":"normal","font-variant-ligatures":"normal"}},[t._v("/")]),i("span",{staticStyle:{"white-space":"pre-wrap","overflow-wrap":"break-word","letter-spacing":"normal",orphans:"2","text-indent":"0px","text-transform":"none",widows:"2","word-spacing":"0px","-webkit-text-stroke-width":"0px","font-size":"14pt","font-family":'"Courier New"',"font-variant-caps":"normal","font-variant-ligatures":"normal"}},[t._v("进程")]),i("span",{staticStyle:{"white-space":"pre-wrap","overflow-wrap":"break-word","letter-spacing":"normal",orphans:"2","text-indent":"0px","text-transform":"none",widows:"2","word-spacing":"0px","-webkit-text-stroke-width":"0px","font-size":"14pt","font-family":'"Courier New"',"font-variant-caps":"normal","font-variant-ligatures":"normal"}},[t._v("池的方法：")])]),i("ul",[i("li",[i("div",[i("span",{staticStyle:{"font-size":"14pt"}},[t._v("submit(函数, '参数')")])])]),i("li",[i("div",[i("span",{staticStyle:{"white-space":"pre-wrap","overflow-wrap":"break-word","letter-spacing":"normal",orphans:"2","text-indent":"0px","text-transform":"none",widows:"2","word-spacing":"0px","-webkit-text-stroke-width":"0px","font-size":"14pt","font-family":'"Courier New"',"font-variant-caps":"normal","font-variant-ligatures":"normal"}},[t._v("map(函数, 可迭代对象)")]),i("span",{staticStyle:{"font-size":"14pt"}})])])]),i("div",[i("font",{staticStyle:{"font-size":"12pt"}},[i("br")])],1),i("div",[i("font",{staticStyle:{"font-size":"14pt"}},[i("span",{staticStyle:{"font-size":"14pt",color:"rgb(227, 0, 0)","font-weight":"bold"}},[t._v("注意: 在本章节中 ")]),i("span",{staticStyle:{"font-size":"14pt",color:"rgb(227, 0, 0)","font-weight":"bold"}},[t._v("ThreadPoolExecutor(5) 为 5 是因为可以看到效果，在正式开发中默认不填就可以了，因为源码已经帮你做了处理")])])],1),i("div",[i("br")]),i("div",[i("br")]),i("div",[i("span",{staticStyle:{"font-size":"14pt","white-space":"pre-wrap","font-weight":"bold"}},[t._v("1.")]),t._v(" "),i("font",{staticStyle:{"font-size":"14pt"}},[i("span",{staticStyle:{"font-size":"14pt","font-weight":"bold"}},[t._v(".submit(函数, '参数') -> 天生异步执行")])])],1),i("div",[i("font",{staticStyle:{"font-size":"14pt"}},[i("br")])],1),i("div",{staticStyle:{"box-sizing":"border-box",padding:"8px","font-family":'Monaco, Menlo, Consolas, "Courier New", monospace',"font-size":"12px",color:"rgb(51, 51, 51)","border-radius":"4px","background-color":"rgb(251, 250, 248)",border:"1px solid rgba(0, 0, 0, 0.15)","-en-codeblock":"true"}},[i("div",[i("span",{staticStyle:{"font-size":"9pt"}},[t._v("from concurrent import futures")])]),i("div",[i("font",{staticStyle:{"font-size":"9pt"}},[i("br")])],1),i("div",[i("font",{staticStyle:{"font-size":"9pt"}},[t._v("def fun(i):")])],1),i("div",[i("font",{staticStyle:{"font-size":"9pt"}},[t._v("    i += 1")])],1),i("div",[i("font",{staticStyle:{"font-size":"9pt"}},[t._v("    print(i)")])],1),i("div",[i("font",{staticStyle:{"font-size":"9pt"}},[i("br")])],1),i("div",[i("font",{staticStyle:{"font-size":"9pt"}},[t._v("thread_pool = futures.ThreadPoolExecutor(5)  "),i("font",{attrs:{color:"#E30000"}},[t._v("# 创建num个线程来处理任务，如果不传默认是 os.cpu_count()（cpu数量） * 5")])],1)],1),i("div",[i("font",{staticStyle:{"font-size":"9pt"}},[t._v("for i in range(20):")])],1),i("div",[i("font",{staticStyle:{"font-size":"9pt"}},[t._v("    f = thread_pool.submit(fun, i)  "),i("font",{attrs:{color:"#E30000"}},[t._v("# 使用线程池 -> summit() 合并了创建线程的对象 和 调用 start() 方法")])],1)],1),i("div",[i("font",{staticStyle:{"font-size":"9pt"}},[t._v("print('-----主线程-----')")])],1)]),i("div",[i("span",{staticStyle:{"font-size":"14pt"}},[i("br")])]),i("div",[i("span",{staticStyle:{"white-space":"pre-wrap","font-size":"14pt","font-weight":"bold"}},[t._v("2.")]),i("span",{staticStyle:{"font-size":"14pt","font-weight":"bold"}},[t._v(" .")]),i("span",{staticStyle:{"white-space":"pre-wrap","overflow-wrap":"break-word","letter-spacing":"normal",orphans:"2","text-indent":"0px","text-transform":"none",widows:"2","word-spacing":"0px","-webkit-text-stroke-width":"0px","font-size":"14pt","font-family":'"Courier New"',"font-variant-caps":"normal","font-variant-ligatures":"normal","font-weight":"bold"}},[t._v("map(函数, 可迭代对象)")]),i("span",{staticStyle:{"font-size":"14pt","font-weight":"bold"}},[t._v(" -> 天生异步执行，")]),i("span",{staticStyle:{"font-size":"14pt","font-weight":"bold"}},[t._v("可迭代对象的长度就是任务的数量，函数每一次都会接收")]),i("span",{staticStyle:{"font-size":"14pt","font-weight":"bold"}},[t._v("可迭代对象里面的一个值进行处理")])])]),i("div",[i("span",{staticStyle:{"font-size":"14pt"}},[i("br")])]),i("div",{staticStyle:{"box-sizing":"border-box",padding:"8px","font-family":'Monaco, Menlo, Consolas, "Courier New", monospace',"font-size":"12px",color:"rgb(51, 51, 51)","border-radius":"4px","background-color":"rgb(251, 250, 248)",border:"1px solid rgba(0, 0, 0, 0.15)","-en-codeblock":"true"}},[i("div",[i("span",{staticStyle:{"font-size":"9pt","font-family":"Monaco"}},[t._v("from concurrent import futures")])]),i("div",[i("br")]),i("div",[i("br")]),i("div",[i("span",{staticStyle:{"font-family":"Monaco"}},[i("font",{staticStyle:{"font-size":"9pt"}},[t._v("def fun(i):")])],1)]),i("div",[i("span",{staticStyle:{"font-family":"Monaco"}},[i("font",{staticStyle:{"font-size":"9pt"}},[t._v("    i += 1")])],1)]),i("div",[i("span",{staticStyle:{"font-family":"Monaco"}},[i("font",{staticStyle:{"font-size":"9pt"}},[t._v("    print(i)")])],1)]),i("div",[i("br")]),i("div",[i("br")]),i("div",[i("span",{staticStyle:{"font-family":"Monaco"}},[i("font",{staticStyle:{"font-size":"9pt"}},[t._v("thread_pool = futures.ThreadPoolExecutor(5) "),i("font",{attrs:{color:"#E30000"}},[t._v(" # 创建num个线程来处理任务，如果不传默认是 os.cpu_count()（cpu数量） * 5")])],1)],1)]),i("div",[i("span",{staticStyle:{"font-family":"Monaco"}},[i("font",{staticStyle:{"font-size":"9pt"}},[t._v("thread_pool.map(fun, range(20))  "),i("font",{attrs:{color:"#E30000"}},[t._v("# 使用线程池")])],1)],1)]),i("div",[i("span",{staticStyle:{"font-family":"Monaco"}},[i("font",{staticStyle:{"font-size":"9pt"}},[t._v("print('-----主线程-----')")])],1)])]),i("div",[i("br")]),i("div",[i("span",{staticStyle:{"white-space":"pre-wrap","font-size":"14pt","font-weight":"bold"}},[t._v("3.")]),i("span",{staticStyle:{"font-size":"14pt","font-weight":"bold"}}),i("span",{staticStyle:{"font-size":"14pt"}},[i("span",{staticStyle:{"font-size":"14pt","font-weight":"bold"}},[t._v(".shutdown() -> 等待所有子线程执行完再往下执行")])])]),i("div",[i("span",{staticStyle:{"font-size":"14pt"}},[i("br")])]),i("div",{staticStyle:{"box-sizing":"border-box",padding:"8px","font-family":'Monaco, Menlo, Consolas, "Courier New", monospace',"font-size":"12px",color:"rgb(51, 51, 51)","border-radius":"4px","background-color":"rgb(251, 250, 248)",border:"1px solid rgba(0, 0, 0, 0.15)","-en-codeblock":"true"}},[i("div",[i("font",{staticStyle:{"font-size":"9pt"}},[t._v("from concurrent import futures")])],1),i("div",[i("font",{staticStyle:{"font-size":"9pt"}},[i("br")])],1),i("div",[i("font",{staticStyle:{"font-size":"9pt"}},[i("br")])],1),i("div",[i("font",{staticStyle:{"font-size":"9pt"}},[t._v("def fun(i):")])],1),i("div",[i("font",{staticStyle:{"font-size":"9pt"}},[t._v("    i += 1")])],1),i("div",[i("font",{staticStyle:{"font-size":"9pt"}},[t._v("    print(i)")])],1),i("div",[i("font",{staticStyle:{"font-size":"9pt"}},[i("br")])],1),i("div",[i("font",{staticStyle:{"font-size":"9pt"}},[i("br")])],1),i("div",[i("font",{staticStyle:{"font-size":"9pt"}},[t._v("thread_pool = futures.ThreadPoolExecutor(5)  "),i("font",{attrs:{color:"#E30000"}},[t._v("# 创建num个线程来处理任务，如果不传默认是 os.cpu_count()（cpu数量） * 5")])],1)],1),i("div",[i("font",{staticStyle:{"font-size":"9pt"}},[i("br")])],1),i("div",[i("font",{staticStyle:{"font-size":"9pt"}},[t._v("for i in range(20):")])],1),i("div",[i("font",{staticStyle:{"font-size":"9pt"}},[t._v("    thread_pool.submit(fun, i)  "),i("font",{attrs:{color:"#E30000"}},[t._v("# 使用线程池")])],1)],1),i("div",[i("font",{staticStyle:{"font-size":"9pt"}},[i("br")])],1),i("div",[i("font",{staticStyle:{"font-size":"9pt"}},[t._v("thread_pool.shutdown()  "),i("font",{attrs:{color:"#E30000"}},[i("b",[t._v("# 等待所有子线程结束后再往下执行")])])],1)],1),i("div",[i("font",{staticStyle:{"font-size":"9pt"}},[i("br")])],1),i("div",[i("font",{staticStyle:{"font-size":"9pt"}},[t._v("print('---- 主线程 ----')")])],1)]),i("div",[i("span",{staticStyle:{"font-size":"14pt"}},[i("br")])]),i("div",[i("span",{staticStyle:{"white-space":"pre-wrap","font-size":"14pt","font-weight":"bold"}},[t._v("4.")]),i("span",{staticStyle:{"font-size":"14pt","font-weight":"bold"}},[t._v(" .result() -> 获取线程返回值")])]),i("div",[i("span",{staticStyle:{"font-size":"14pt"}},[i("br")])]),i("ul",[i("li",[i("div",[i("span",{staticStyle:{"font-size":"12pt"}},[t._v("map方法是没有返回值的")])])])]),i("div",[i("br")]),i("div",{staticStyle:{"box-sizing":"border-box",padding:"8px","font-family":'Monaco, Menlo, Consolas, "Courier New", monospace',"font-size":"12px",color:"rgb(51, 51, 51)","border-radius":"4px","background-color":"rgb(251, 250, 248)",border:"1px solid rgba(0, 0, 0, 0.15)","-en-codeblock":"true"}},[i("div",[t._v("import time")]),i("div",[t._v("import random")]),i("div",[t._v("from concurrent import futures")]),i("div",[i("br")]),i("div",[i("br")]),i("div",[t._v("def fun(i):")]),i("div",[t._v("    i += 1")]),i("div",[t._v("    time.sleep(random.random())")]),i("div",[t._v("    return i")]),i("div",[i("br")]),i("div",[i("br")]),i("div",[t._v("thread_pool = futures.ThreadPoolExecutor(5)  "),i("font",{attrs:{color:"#41AD1C"}},[t._v("# 创建num个线程来处理任务，如果不传默认是 os.cpu_count()（cpu数量） * 5")])],1),i("div",[i("br")]),i("div",[t._v("r_lis = []")]),i("div",[t._v("for i in range(20):")]),i("div",[t._v("    res = thread_pool.submit(fun, i)  "),i("font",{attrs:{color:"#41AD1C"}},[t._v("# 使用线程池")])],1),i("div",[t._v("    r_lis.append(res)")]),i("div",[i("font",{attrs:{color:"#E30000"}},[t._v("# print(res.result())  # 注意：不要在循环中进行获取线程的返回值，因为 .result() 方法就是在等待着获取值，这样会将异步执行变成了同步执行，而是将得到的线程对象放进列表中，等待线程结束后再循环列表再使用 .result() 获取返回值")])],1),i("div",[i("br")]),i("div",[t._v("thread_pool.shutdown()  "),i("font",{attrs:{color:"#E30000"}},[t._v("# 等待所有子线程结束后再往下执行")])],1),i("div",[i("br")]),i("div",[t._v("for i in r_lis:")]),i("div",[t._v("    print(i.result())  "),i("font",{attrs:{color:"#E30000"}},[i("b",[t._v("# 获取线程返回值 -> 注意：如果没有 thread_pool.shutdown() ，只要 .result() 一获取到值就开始返回了，可以把 thread_pool.shutdown() 注释起来看一下")])])],1),i("div",[i("br")]),i("div",[t._v("print('---- 主线程 ----')")])]),i("div",[i("br")]),i("div",[i("span",{staticStyle:{"box-sizing":"border-box","letter-spacing":"normal",orphans:"2","text-indent":"0px","text-transform":"none",widows:"2","word-spacing":"0px","-webkit-text-stroke-width":"0px","font-size":"14pt","white-space":"pre-wrap",color:"rgb(0, 0, 0)","font-family":'"Courier New"',"font-variant-caps":"normal","font-variant-ligatures":"normal","font-weight":"bold"}},[t._v("5.")]),i("span",{staticStyle:{"font-size":"medium","letter-spacing":"normal",orphans:"2","text-indent":"0px","text-transform":"none","white-space":"normal",widows:"2","word-spacing":"0px","-webkit-text-stroke-width":"0px",color:"rgb(0, 0, 0)","font-family":'"Courier New"',"font-variant-caps":"normal","font-variant-ligatures":"normal"}}),i("font",{staticStyle:{"font-size":"14pt"}},[i("span",{staticStyle:{"letter-spacing":"normal",orphans:"2","text-indent":"0px","text-transform":"none","white-space":"normal",widows:"2","word-spacing":"0px","-webkit-text-stroke-width":"0px","font-size":"14pt",color:"rgb(0, 0, 0)","font-family":'"Courier New"',"font-variant-caps":"normal","font-variant-ligatures":"normal","font-weight":"bold"}},[t._v(".")]),i("span",{staticStyle:{"font-size":"14pt","font-weight":"bold"}},[t._v("add_done_callback(回调函数) -> ")]),i("span",{staticStyle:{"box-sizing":"border-box","letter-spacing":"normal",orphans:"2","text-indent":"0px","text-transform":"none","white-space":"normal",widows:"2","word-spacing":"0px","-webkit-text-stroke-width":"0px","font-size":"14pt",color:"rgb(0, 0, 0)","font-family":'"Courier New"',"font-variant-caps":"normal","font-variant-ligatures":"normal","font-weight":"bold"}},[t._v("回调函数")])])],1),i("div",[i("font",{staticStyle:{"font-size":"12pt"}},[i("br")])],1),i("ul",[i("li",[i("div",[i("span",{staticStyle:{"font-size":"12pt",color:"rgb(227, 0, 0)"}},[t._v("回调函数其实就是接收线程的返回值后再做一次处理")])])]),i("li",[i("div",[i("span",{staticStyle:{"font-size":"12pt",color:"rgb(227, 0, 0)"}},[t._v("map 没有回调函数")])])]),i("li",[i("div",[i("span",{staticStyle:{"font-size":"12pt",color:"rgb(227, 0, 0)"}},[t._v("使用了回调函数就没有了返回值")])])])]),i("div",[i("br")]),i("div",{staticStyle:{"box-sizing":"border-box",padding:"8px","font-family":'Monaco, Menlo, Consolas, "Courier New", monospace',"font-size":"12px",color:"rgb(51, 51, 51)","border-radius":"4px","background-color":"rgb(251, 250, 248)",border:"1px solid rgba(0, 0, 0, 0.15)","-en-codeblock":"true"}},[i("div",[t._v("import time")]),i("div",[t._v("import random")]),i("div",[t._v("from concurrent import futures")]),i("div",[i("br")]),i("div",[i("br")]),i("div",[i("font",{attrs:{color:"#41AD1C"}},[t._v("# 线程函数")])],1),i("div",[t._v("def fun(i):")]),i("div",[t._v("    i += 1")]),i("div",[t._v("    time.sleep(random.random())")]),i("div",[t._v("    return i")]),i("div",[i("br")]),i("div",[i("br")]),i("div",[i("font",{attrs:{color:"#41AD1C"}},[t._v("# 回调函数")])],1),i("div",[t._v("def cb(args):")]),i("div",[t._v("    print(args.result() + 1) "),i("font",{attrs:{color:"#E30000"}},[t._v(" # 使用 .result() 方法接收线程的返回值")])],1),i("div",[i("br")]),i("div",[i("br")]),i("div",[t._v("thread_pool = futures.ThreadPoolExecutor(5)")]),i("div",[t._v("thread_pool.submit(fun, 1).add_done_callback(cb) "),i("font",{attrs:{color:"#E30000"}},[t._v(" # .add_done_callback() 使用回调函数")])],1)]),i("div",[i("br")]),i("div"),i("ul",[i("li",[i("div",[i("span",{staticStyle:{"font-size":"12pt"}},[t._v("回调函数的使用场景")])])])]),i("div",[i("br")]),i("ul",[i("ul",[i("li",[i("div",[i("span",{staticStyle:{"white-space":"pre-wrap","overflow-wrap":"break-word","letter-spacing":"normal",orphans:"2","text-indent":"0px","text-transform":"none",widows:"2","word-spacing":"0px","-webkit-text-stroke-width":"0px","font-size":"12pt",color:"rgb(0, 0, 0)","font-variant-caps":"normal","font-variant-ligatures":"normal","line-height":"1.5"}},[t._v("线程池中任何一个任务一旦处理完了，就立即告知主线程：我好了额，你可以处理我的结果了。主线程则调用一个函数去处理该结果")]),i("span",{staticStyle:{"white-space":"pre-wrap","overflow-wrap":"break-word","letter-spacing":"normal",orphans:"2","text-indent":"0px","text-transform":"none",widows:"2","word-spacing":"0px","-webkit-text-stroke-width":"0px","font-size":"12pt",color:"rgb(0, 0, 0)","font-family":'"Courier New"',"font-variant-caps":"normal","font-variant-ligatures":"normal","line-height":"1.5"}},[t._v("，该函数即回调函数")])])])])]),i("div",[i("br")]),i("ul",[i("ul",[i("li",[i("div",[i("span",{staticStyle:{"font-size":"12pt","white-space":"pre-wrap","overflow-wrap":"break-word","letter-spacing":"normal",orphans:"2","text-indent":"0px","text-transform":"none",widows:"2","word-spacing":"0px","-webkit-text-stroke-width":"0px",color:"rgb(0, 0, 0)","font-family":'"Courier New"',"font-variant-caps":"normal","font-variant-ligatures":"normal","line-height":"1.5"}},[t._v("我们可以把耗时间（阻塞）的任务放到线程池中，然后指定回调函数（主线程负责执行），这样主线程在执行回调函数时就省去了I")]),i("span",{staticStyle:{"font-size":"12pt","white-space":"pre-wrap","overflow-wrap":"break-word","letter-spacing":"normal",orphans:"2","text-indent":"0px","text-transform":"none",widows:"2","word-spacing":"0px","-webkit-text-stroke-width":"0px",color:"rgb(0, 0, 0)","font-family":'"Courier New"',"font-variant-caps":"normal","font-variant-ligatures":"normal"}},[t._v("/O的过程，直接拿到的是任务的结果")])])])])]),i("div",[i("br")]),i("ul",[i("ul",[i("li",[i("div",[t._v("回调函数一般会用于爬虫的比较多，因为爬虫需要等待页面返回结果，例如下面的例子")])])])]),i("div",[i("br")]),i("ul",[i("ul",[i("li",[i("div",[t._v("例如: 我们要对10个页面进行页面的请求,获取页面的代码进行分析，我们不可能等待一个页面请求完拿到页面代码进行处理后，再去请求第二个页面，这样会很浪费时间的，我们可以使用线程池和回调函数进行处理，把请求多个页面等待结果的任务放到线程池中执行，然后线程池里的线程就会同时开始请求不同的页面，当其中一个线程的请求返回了结果，就将该结果传递给回调函数进行分析处理")])])])]),i("div",[i("br")]),i("div",{staticStyle:{"box-sizing":"border-box",padding:"8px","font-family":'Monaco, Menlo, Consolas, "Courier New", monospace',"font-size":"12px",color:"rgb(51, 51, 51)","border-radius":"4px","background-color":"rgb(251, 250, 248)",border:"1px solid rgba(0, 0, 0, 0.15)","-en-codeblock":"true"}},[i("div",[t._v("import requests")]),i("div",[t._v("from concurrent import futures")]),i("div",[i("br")]),i("div",[i("br")]),i("div",[i("font",{attrs:{color:"#E30000"}},[t._v("# 把请求的任务放在线程池中处理，因为请求页面需要等待 -> 线程函数")])],1),i("div",[t._v("def get_url(url):")]),i("div",[t._v("    ret = requests.get(url)")]),i("div",[t._v("    return {")]),i("div",[t._v("        'url': url,")]),i("div",[t._v("        'status_code': ret.status_code, "),i("font",{attrs:{color:"#41AD1C"}},[t._v(" # 获取请求的状态码")])],1),i("div",[t._v("        'content': ret.text  "),i("font",{attrs:{color:"#41AD1C"}},[t._v("# 获取请求成功后的页面代码")])],1),i("div",[t._v("    }")]),i("div",[i("br")]),i("div",[i("br")]),i("div",[i("font",{attrs:{color:"#E30000"}},[t._v("# 等待获取页面的请求结果，然后对请求结果进行处理 -> 回调函数")])],1),i("div",[t._v("def cb(dic):")]),i("div",[t._v("    dic = dic.result()")]),i("div",[t._v("    print('网址：%s 状态码：%s 页面代码的长度：%s' % (dic['url'], dic['status_code'], len(dic['content'])))")]),i("div",[i("br")]),i("div",[i("br")]),i("div",[t._v("# 主线程")]),i("div",[t._v("url_l = [")]),i("div",[t._v("    'http://www.baidu.com',")]),i("div",[t._v("    'http://www.sogou.com',")]),i("div",[t._v("    'http://www.hao123.com',")]),i("div",[t._v("    'http://www.yangxiaoer.cc',")]),i("div",[t._v("    'http://www.python.org'")]),i("div",[t._v("]")]),i("div",[t._v("thread_pool = futures.ThreadPoolExecutor(5)")]),i("div",[t._v("for i in url_l:")]),i("div",[t._v("    thread_pool.submit(get_url, i).add_done_callback(cb)")])])]),i("div",[i("br")])])])])}),[],!1,null,null,null);o.default=r.exports}}]);