(window.webpackJsonp=window.webpackJsonp||[]).push([[313],{663:function(_,t,o){"use strict";o.r(t);var i=o(25),v=Object(i.a)({},(function(){var _=this,t=_.$createElement,o=_._self._c||t;return o("ContentSlotsDistributor",{attrs:{"slot-key":_.$parent.slotKey}},[o("div",[o("span",[o("div",[o("div",[o("span",{staticStyle:{"font-size":"14pt","white-space":"pre-wrap","font-weight":"bold"}},[_._v("1.")]),_._v(" "),o("span",{staticStyle:{"font-size":"14pt","font-weight":"bold"}},[_._v("类")]),o("span",{staticStyle:{"font-size":"14pt","font-weight":"bold"}},[_._v("没有指定 metaclass 参数")])]),o("div",[o("span",{staticStyle:{"font-size":"14pt"}},[o("br")])]),o("ul",[o("li",[o("div",[_._v("执行顺序: 先执行 __new__ 方法，然后再执行 __init__ 方法")])])]),o("div",[o("br")]),o("div",{staticStyle:{"box-sizing":"border-box",padding:"8px","font-family":'Monaco, Menlo, Consolas, "Courier New", monospace',"font-size":"12px",color:"rgb(51, 51, 51)","border-radius":"4px","background-color":"rgb(251, 250, 248)",border:"1px solid rgba(0, 0, 0, 0.15)","-en-codeblock":"true"}},[o("div",[_._v("class Foo(object):")]),o("div",[_._v("    def "),o("font",{attrs:{color:"#FA7A00"}},[_._v("__new__")]),_._v("(cls, *args, **kwargs):")],1),o("div",[_._v("        print(1)")]),o("div",[_._v("        return object.__new__(cls)")]),o("div",[o("br")]),o("div",[_._v("    def "),o("font",{attrs:{color:"#FA7A00"}},[_._v("__init__")]),_._v("(self):")],1),o("div",[_._v("        print(2)")]),o("div",[_._v("        self.name = 'Kevin'")]),o("div",[o("br")]),o("div",[o("br")]),o("div",[_._v("obj = Foo()")])]),o("div",[o("br")]),o("div",[o("span",{staticStyle:{"font-size":"14pt","white-space":"pre-wrap","font-weight":"bold"}},[_._v("2.")]),_._v(" "),o("span",{staticStyle:{"font-size":"14pt","font-weight":"bold"}},[_._v("类指定了")]),o("span",{staticStyle:{"font-size":"14pt","font-weight":"bold"}},[_._v(" metaclass 参数")])]),o("div",[o("span",{staticStyle:{"font-size":"14pt"}},[o("br")])]),o("ul",[o("li",[o("div",[o("span",{staticStyle:{"font-size":"12pt"}},[_._v("metaclass 参数的作用: ")]),_._v("指定当前类是由谁创建")])])]),o("div",[o("br")]),o("ul",[o("li",[o("div",[_._v("执行顺序:")])])]),o("div",[o("br")]),o("ul",[o("ul",[o("li",[o("div",[_._v("创建类时: 先执行type下的__init__方法")])])])]),o("div",[o("br")]),o("ul",[o("ul",[o("li",[o("div",[_._v("实例化对象时: 当一个类实例化时会执行type下的__call__方法，而__call__方法的返回值就是实例化的对象")])])])]),o("div",[o("br")]),o("ul",[o("ul",[o("ul",[o("li",[o("div",[_._v("__call__方法内部调用:")])])]),o("ul",[o("ul",[o("li",[o("div",[_._v("类.__new__ -> 创建对象")])]),o("li",[o("div",[_._v("类.__init__ -> 对象属性的初始化")])])])])])]),o("div",[o("br")]),o("ul",[o("li",[o("div",[_._v("以下面的例子为前提的辅助说明:")])])]),o("div",[o("br")]),o("ul",[o("ul",[o("li",[o("div",[_._v("Foo是一个类")])]),o("li",[o("div",[_._v("Foo类是MyType的一个“对象”，因为Foo是由MyType所创建的，所以Foo()在实例化的时候会执行MyType下的__call__方法")])])])]),o("div",[o("br")]),o("div",{staticStyle:{"box-sizing":"border-box",padding:"8px","font-family":'Monaco, Menlo, Consolas, "Courier New", monospace',"font-size":"12px",color:"rgb(51, 51, 51)","border-radius":"4px","background-color":"rgb(251, 250, 248)",border:"1px solid rgba(0, 0, 0, 0.15)","-en-codeblock":"true"}},[o("div",[_._v("class MyType("),o("font",{attrs:{color:"#FA7A00"}},[_._v("type")]),_._v("):  "),o("font",{attrs:{color:"#41AD1C"}},[_._v("# 必须继承type方法，由type方法创建类")])],1),o("div",[_._v("    def "),o("font",{attrs:{color:"#FA7A00"}},[_._v("__init__")]),_._v("(self, *args, **kwargs):")],1),o("div",[o("font",{attrs:{color:"#41AD1C"}},[_._v('"""')])],1),o("div",[o("font",{attrs:{color:"#41AD1C"}},[_._v("        当创建 Foo 类的时候就会执行当前类的 __init__ 方法（即：type下的__init__方法）")])],1),o("div",[o("font",{attrs:{color:"#41AD1C"}},[_._v('        """')])],1),o("div",[_._v("        super(MyType, self).__init__(*args, **kwargs)  "),o("font",{attrs:{color:"#41AD1C"}},[_._v("# 调用type类下的__init__方法")])],1),o("div",[o("br")]),o("div",[_._v("    def "),o("font",{attrs:{color:"#FA7A00"}},[_._v("__call__")]),_._v("(cls, *args, **kwargs):")],1),o("div",[o("font",{attrs:{color:"#41AD1C"}},[_._v('"""')])],1),o("div",[o("font",{attrs:{color:"#41AD1C"}},[_._v("        当实例化 Foo 类的时候就会执行当前类的 __call__ 方法（即：type下的__call__方法），然后通过 __call__ 方法调用 Foo 类的 __new__ 和 __init__ 方法")])],1),o("div",[o("font",{attrs:{color:"#41AD1C"}},[_._v("        :param cls: cls 就是 Foo 类")])],1),o("div",[o("font",{attrs:{color:"#41AD1C"}},[_._v("        :return: __call__ 的返回值就是Foo所实例化出来的对象（即：f_obj = 当前类的__call__方法的返回值）")])],1),o("div",[o("font",{attrs:{color:"#41AD1C"}},[_._v('        """')])],1),o("div",[_._v("        obj = cls.__new__(cls)  "),o("font",{attrs:{color:"#41AD1C"}},[_._v("# 调用 Foo 类下的__new__方法创建对象")])],1),o("div",[_._v("        cls.__init__(obj, *args, **kwargs)  "),o("font",{attrs:{color:"#41AD1C"}},[_._v("# 调用 Foo 类下的__init__方法初始化对象的属性")])],1),o("div",[_._v("        return obj  "),o("font",{attrs:{color:"#41AD1C"}},[_._v("# __call__ 的返回值就是Foo所实例化出来的对象（即：f_obj = 当前类的__call__方法的返回值）")])],1),o("div",[o("br")]),o("div",[o("br")]),o("div",[_._v("class Foo(object, "),o("font",{attrs:{color:"#FA7A00"}},[_._v("metaclass")]),_._v("=MyType):")],1),o("div",[_._v("    def __new__(cls, *args, **kwargs):")]),o("div",[_._v("        return object.__new__(cls)")]),o("div",[o("br")]),o("div",[_._v("    def __init__(self):")]),o("div",[_._v("        self.name = 'Kevin'")]),o("div",[o("br")]),o("div",[o("br")]),o("div",[_._v("f_obj = Foo()")]),o("div",[o("br")]),o("div",[_._v("print(f_obj.name)  "),o("font",{attrs:{color:"#41AD1C"}},[_._v("# Kevin")])],1)]),o("div",[o("br")]),o("div",[o("img",{attrs:{"data-filename":"TIM截图2019093015543.jpg",src:"/kevin-blog/Python/面向对象-类执行顺序_files/TIM截图2019093015543.jpg",type:"image/jpeg"}})])]),o("div",[o("br")])])])])}),[],!1,null,null,null);t.default=v.exports}}]);